@page "/productDescription"
@using System.Text
@using System.Net.Mime
@using global::MudBlazor
@inject IConfiguration Configuration

<PageTitle>Product Description</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Product Description</MudText>
<MudText Typo="Typo.body1" GutterBottom="true">Modify the product descriptions.</MudText>


@* *@
<MudDataGrid  T="ProductDescriptionModel" ServerData="ServerReload" EditMode="DataGridEditMode.Form" ReadOnly="false"
ShowFilterIcons="true"
Filterable="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Product Description</MudText>
        <MudSpacer />
  @*       <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-1"
                      Clearable="true" ClearIcon="@Icons.Material.Filled.Clear"  /> *@
    </ToolBarContent> 

    <Columns>
        <PropertyColumn Property="x => x.ProductDescriptionId" Hidden="true" />
        <PropertyColumn Property="x => x.ModifiedDate" Format="d" Title="Modified" />
        <PropertyColumn Property="x => x.Description" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ProductDescriptionModel" />
    </PagerContent>
</MudDataGrid> 


@code {

    // this page loads all records into the page as there are not many and it is a lookup table.
    // private string? _searchString;
    // private List<ProductDescriptionModel> records = new();
    private MudDataGrid<ProductDescriptionModel> dataGrid = new();
    string? searchString = null;


    private async Task<GridData<ProductDescriptionModel>> ServerReload(GridState<ProductDescriptionModel> state)
    {


        PagedList paging = new();
        IEnumerable<ProductDescriptionModel> data = new List<ProductDescriptionModel>();
        PageingFilter filter = PageingFilter.SetByGridState<ProductDescriptionModel>(state);

        string url = $"{Configuration["Api:base"]}{Configuration["Api:productdescription"]}";
        var json = System.Text.Json.JsonSerializer.Serialize(filter);
        var request = new HttpRequestMessage
        {
            Method= HttpMethod.Get,
                RequestUri = new Uri(url),
                Content = new StringContent(json,
                                            Encoding.UTF8,
                                            MediaTypeNames.Application.Json),
        };

        var response = await httpClient.SendAsync(request).ConfigureAwait(false);
        if (response.IsSuccessStatusCode)
        {
            data = (await response!.Content!.ReadFromJsonAsync<List<ProductDescriptionModel>>()) ?? new List<ProductDescriptionModel>();
            paging = PagedList.FromIEnumerable(response.Headers.GetValues("X-Pagination").SingleOrDefault());

        }

        await Task.Delay(300);
        // data = data.Where(item =>
        // {
        //     if (string.IsNullOrWhiteSpace(searchString))
        //         return true;
        //     if ($"{item.Description} {item.ModifiedDate.ToString("d")}".Contains(searchString))
        //         return true;
        //     return false;
        // }).ToArray();

        // var sortDefinition = state.SortDefinitions.FirstOrDefault();
        // if (sortDefinition != null)
        // {
        //     switch (sortDefinition.SortBy)
        //     {
        //         case nameof(ProductDescriptionModel.Description):
        //             data = data.OrderByDirection(
        //                 sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
        //                 o => o.Description
        //             );
        //             break;
        //         case nameof(ProductDescriptionModel.ModifiedDate):
        //             data = data.OrderByDirection(
        //                 sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
        //                 o => o.ModifiedDate
        //             );
        //             break;
        //     }
        // }

        return new GridData<ProductDescriptionModel>
            {
                TotalItems = paging.TotalCount,
                Items = data,
            };
    }

    private Task OnClear()
    {
        searchString = null;
        return dataGrid.ReloadServerData();
    }
    private Task OnSearch(string text)
    {
        searchString = text;
        return dataGrid.ReloadServerData();
    }
}
