@page "/ChartSalesByTerritory"
@using AdventureWorksDemo.MudBlazor.Common
@using global::MudBlazor
@inject Common.ICommonResponseGet response
@inject IUrl Url
@using Microsoft.Extensions.Caching.Memory;
<PageTitle>Sales by Territory</PageTitle>

<MudTooltip Text="Sales by Territory (per million)">
    <MudChart ChartType="ChartType.Bar" ChartSeries="@_series" @bind-SelectedIndex="Index" XAxisLabels="@_XAxisLabels" 
    Width="100%" Height="350px"
    ChartOptions="@_options" ></MudChart>
</MudTooltip>
@code {
    MemoryCache memoryCache = new MemoryCache(new MemoryCacheOptions());
    IJsonDataService service;

    private ChartOptions _options = new ChartOptions
        {
            YAxisLines = false,
            YAxisTicks = 1,
            MaxNumYAxisTicks = 10,
            YAxisRequireZeroPoint = true,
            XAxisLines = false,
            LineStrokeWidth = 1,
            ShowLegend = true,
            ShowToolTips=true,

        };
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    private readonly List<ChartSeries> _series = new();

    private readonly string?[] _XAxisLabels= { "Year to Date","Last Year" };
    protected async override Task OnInitializedAsync()
    {
        service = new JsonDataService(httpClient, memoryCache);
        var rawData = await service.GetDataAsync<IEnumerable<SaleByTerritory>?>(Url.Report_SalesByTerritory);
        if (rawData != null && rawData.Any())
        {
            foreach (SaleByTerritory item in rawData)
            {
                _series.Add(new ChartSeries() { Name = item.CountryRegion ?? "???", 
                                                Data = new double[] { item.SalesYTDToDisplay,item.SalesLastYearToDisplay } });
            }
        }

        StateHasChanged();
        await base.OnInitializedAsync();
    }
 }