@page "/productDescription"
@using System.Text
@using System.Net.Mime
@using global::MudBlazor
@inject Common.ICommonResponseGet response

<PageTitle>Product Description</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Product Description</MudText>
<MudText Typo="Typo.body1" GutterBottom="true">Modify the product descriptions.</MudText>

<MudDataGrid  T="ProductDescriptionModel" ServerData="ServerReload" 
ShowFilterIcons="true" 
Filterable="true"
Editable="true"
Dense="true"
ReadOnly="false"
CommittedItemChanges="@OnRowEditCommit"
EditMode="DataGridEditMode.Form"      
EditTrigger="DataGridEditTrigger.OnRowClick"
             ref="dataGrid"
>

    <ToolBarContent>
        <MudText Typo="Typo.h6">Product Description</MudText>
        <MudSpacer />
    </ToolBarContent>          

    <Columns>
        <PropertyColumn Property="x => x.ProductDescriptionId" Hidden="true" Editable="false" Filterable="false" >
            <EditTemplate/>
        </PropertyColumn>
        <PropertyColumn Property="x => x.ModifiedDate" Format="d" Title="Modified" Sortable="true" Editable="false" Filterable="true" CellStyle="width: 150px; " />
        <PropertyColumn Property="x => x.Description" Sortable="true" Editable="true" Filterable="true" Required="true" />
    </Columns>
    <PagerContent >
        <MudDataGridPager T="ProductDescriptionModel"  PageSizeOptions=[5,10,25,50,100,250] Class="pa-4" />
    </PagerContent>
</MudDataGrid> 


@code {


    private MudDataGrid<ProductDescriptionModel>? dataGrid ;


    private async Task<GridData<ProductDescriptionModel>> ServerReload(GridState<ProductDescriptionModel> state)
    {
        return await response.FindAllAsync<ProductDescriptionModel>(state, "Description", httpClient);        
    }
    async Task OnRowEditCommit(ProductDescriptionModel item)
    {
        await response.UpdateAsync<ProductDescriptionModel>(item,httpClient);    
        if (dataGrid != null)
        {
            await dataGrid.ReloadServerData();
        }
    }


    
   
}
