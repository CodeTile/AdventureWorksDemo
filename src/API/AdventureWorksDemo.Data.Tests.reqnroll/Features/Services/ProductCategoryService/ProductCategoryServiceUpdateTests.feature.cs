// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AdventureWorksDemo.Data.Tests.reqnroll.Features.Services.ProductCategoryService
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ProductCategoryServiceUpdateTestsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Services/ProductCategoryService", "ProductCategoryServiceUpdateTests", "System tests for the ProductCategoryService\r\nTesting the methods UpdateAsync", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "ProductCategoryServiceUpdateTests.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
#line hidden
#line 8
 await testRunner.GivenAsync("The service to test is \'AdventureWorksDemo.Data.Services.IProductCategoryService\'" +
                    "", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
 await testRunner.AndAsync("I reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UpdateAsync")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceUpdateTests")]
        public async System.Threading.Tasks.Task UpdateAsync()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("UpdateAsync", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table498 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table498.AddRow(new string[] {
                            "6",
                            "6/1/2002 12:00:00 AM",
                            "Road Bikes",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table498.AddRow(new string[] {
                            "7",
                            "6/1/2002 12:00:00 AM",
                            "For Delete Tests Only",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
#line 12
 await testRunner.GivenAsync("the table \'Production.ProductCategory\' filtered by \'ProductCategoryId > 5\' contai" +
                        "ns", ((string)(null)), table498, "Given ");
#line hidden
                global::Reqnroll.Table table499 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "Name"});
                table499.AddRow(new string[] {
                            "6",
                            "How Now Brown Cow"});
#line 16
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Models.ProductCategoryModel\'", ((string)(null)), table499, "When ");
#line hidden
                global::Reqnroll.Table table500 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table500.AddRow(new string[] {
                            "model",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 19
 await testRunner.AndAsync("I call the method \'UpdateAsync\' with the parameter values", ((string)(null)), table500, "And ");
#line hidden
                global::Reqnroll.Table table501 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table501.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<AdventureWorksDemo.Data.Models.Produ" +
                                "ctCategoryModel>"});
#line 22
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table501, "Then ");
#line hidden
                global::Reqnroll.Table table502 = new global::Reqnroll.Table(new string[] {
                            "IsFailure",
                            "IsSuccess",
                            "Message"});
                table502.AddRow(new string[] {
                            "False",
                            "True",
                            ""});
#line 25
 await testRunner.AndAsync("the result is", ((string)(null)), table502, "And ");
#line hidden
                global::Reqnroll.Table table503 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table503.AddRow(new string[] {
                            "6",
                            "5/24/2024 12:34:56 PM",
                            "How Now Brown Cow",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
#line 28
 await testRunner.AndAsync("the results property \'Value\' contains", ((string)(null)), table503, "And ");
#line hidden
                global::Reqnroll.Table table504 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table504.AddRow(new string[] {
                            "6",
                            "5/24/2024 12:34:56 PM",
                            "How Now Brown Cow",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table504.AddRow(new string[] {
                            "7",
                            "6/1/2002 12:00:00 AM",
                            "For Delete Tests Only",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
#line 32
 await testRunner.AndAsync("the table \'Production.ProductCategory\' filtered by \'ProductCategoryId > 5\' contai" +
                        "ns", ((string)(null)), table504, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UpdateNoChange")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceUpdateTests")]
        public async System.Threading.Tasks.Task UpdateNoChange()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("UpdateNoChange", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 38
 await testRunner.GivenAsync("I don\'t reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table505 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table505.AddRow(new string[] {
                            "7",
                            "6/1/2002 12:00:00 AM",
                            "For Delete Tests Only",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
#line 39
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Models.ProductCategoryModel\'", ((string)(null)), table505, "When ");
#line hidden
                global::Reqnroll.Table table506 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table506.AddRow(new string[] {
                            "model",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 42
 await testRunner.AndAsync("I call the method \'UpdateAsync\' with the parameter values", ((string)(null)), table506, "And ");
#line hidden
                global::Reqnroll.Table table507 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table507.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<AdventureWorksDemo.Data.Models.Produ" +
                                "ctCategoryModel>"});
#line 45
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table507, "Then ");
#line hidden
                global::Reqnroll.Table table508 = new global::Reqnroll.Table(new string[] {
                            "IsFailure",
                            "IsSuccess",
                            "Message"});
                table508.AddRow(new string[] {
                            "False",
                            "True",
                            "Record is already up to date!"});
#line 48
 await testRunner.AndAsync("the result is", ((string)(null)), table508, "And ");
#line hidden
                global::Reqnroll.Table table509 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table509.AddRow(new string[] {
                            "7",
                            "6/1/2002 12:00:00 AM",
                            "For Delete Tests Only",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
#line 51
 await testRunner.AndAsync("the results property \'Value\' contains", ((string)(null)), table509, "And ");
#line hidden
                global::Reqnroll.Table table510 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table510.AddRow(new string[] {
                            "6",
                            "6/1/2002 12:00:00 AM",
                            "Road Bikes",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table510.AddRow(new string[] {
                            "7",
                            "6/1/2002 12:00:00 AM",
                            "For Delete Tests Only",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
#line 54
 await testRunner.AndAsync("the table \'Production.ProductCategory\' filtered by \'ProductCategoryId > 5\' contai" +
                        "ns", ((string)(null)), table510, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UpdateShortName")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceUpdateTests")]
        public async System.Threading.Tasks.Task UpdateShortName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("UpdateShortName", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 60
 await testRunner.GivenAsync("I don\'t reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table511 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table511.AddRow(new string[] {
                            "6",
                            "6/1/2002 12:00:00 AM",
                            "Road Bikes",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table511.AddRow(new string[] {
                            "7",
                            "6/1/2002 12:00:00 AM",
                            "For Delete Tests Only",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
#line 61
 await testRunner.AndAsync("the table \'Production.ProductCategory\' filtered by \'ProductCategoryId > 5\' contai" +
                        "ns", ((string)(null)), table511, "And ");
#line hidden
                global::Reqnroll.Table table512 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "Name"});
                table512.AddRow(new string[] {
                            "6",
                            "Hi"});
#line 65
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Models.ProductCategoryModel\'", ((string)(null)), table512, "When ");
#line hidden
                global::Reqnroll.Table table513 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table513.AddRow(new string[] {
                            "model",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 68
 await testRunner.AndAsync("I call the method \'UpdateAsync\' with the parameter values", ((string)(null)), table513, "And ");
#line hidden
                global::Reqnroll.Table table514 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table514.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<AdventureWorksDemo.Data.Models.Produ" +
                                "ctCategoryModel>"});
#line 71
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table514, "Then ");
#line hidden
                global::Reqnroll.Table table515 = new global::Reqnroll.Table(new string[] {
                            "IsFailure",
                            "IsSuccess"});
                table515.AddRow(new string[] {
                            "True",
                            "False"});
#line 74
 await testRunner.AndAsync("the result is", ((string)(null)), table515, "And ");
#line hidden
                global::Reqnroll.Table table516 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table516.AddRow(new string[] {
                            "\'Name\' must be between 3 and 50 characters. You entered 2 characters."});
#line 77
 await testRunner.AndAsync("the results property \'Message\' contains", ((string)(null)), table516, "And ");
#line hidden
                global::Reqnroll.Table table517 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table517.AddRow(new string[] {
                            "6",
                            "Hi",
                            "6/1/2002 12:00:00 AM",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
#line 80
 await testRunner.AndAsync("the results property \'Value\' contains", ((string)(null)), table517, "And ");
#line hidden
                global::Reqnroll.Table table518 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table518.AddRow(new string[] {
                            "6",
                            "6/1/2002 12:00:00 AM",
                            "Road Bikes",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table518.AddRow(new string[] {
                            "7",
                            "6/1/2002 12:00:00 AM",
                            "For Delete Tests Only",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
#line 84
 await testRunner.AndAsync("the table \'Production.ProductCategory\' filtered by \'ProductCategoryId > 5\' contai" +
                        "ns", ((string)(null)), table518, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UpdateUnknownRecord")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceUpdateTests")]
        public async System.Threading.Tasks.Task UpdateUnknownRecord()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("UpdateUnknownRecord", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 90
 await testRunner.GivenAsync("I don\'t reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table519 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "Name"});
                table519.AddRow(new string[] {
                            "1234",
                            "UpdateUnknownRecord"});
#line 91
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Models.ProductCategoryModel\'", ((string)(null)), table519, "When ");
#line hidden
                global::Reqnroll.Table table520 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table520.AddRow(new string[] {
                            "model",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 94
 await testRunner.AndAsync("I call the method \'UpdateAsync\' with the parameter values", ((string)(null)), table520, "And ");
#line hidden
                global::Reqnroll.Table table521 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table521.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<AdventureWorksDemo.Data.Models.Produ" +
                                "ctCategoryModel>"});
#line 97
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table521, "Then ");
#line hidden
                global::Reqnroll.Table table522 = new global::Reqnroll.Table(new string[] {
                            "IsFailure",
                            "IsSuccess",
                            "Message"});
                table522.AddRow(new string[] {
                            "True",
                            "False",
                            "Unable to locate record to update!"});
#line 101
 await testRunner.AndAsync("the result is", ((string)(null)), table522, "And ");
#line hidden
                global::Reqnroll.Table table523 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table523.AddRow(new string[] {
                            "1234",
                            "1/1/0001 12:00:00 AM",
                            "UpdateUnknownRecord",
                            "00000000-0000-0000-0000-000000000000"});
#line 105
 await testRunner.AndAsync("the results property \'Value\' contains", ((string)(null)), table523, "And ");
#line hidden
                global::Reqnroll.Table table524 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table524.AddRow(new string[] {
                            "1",
                            "6/1/2002 12:00:00 AM",
                            "Bikes",
                            "cfbda25c-df71-47a7-b81b-64ee161aa37c"});
                table524.AddRow(new string[] {
                            "2",
                            "6/1/2002 12:00:00 AM",
                            "Components",
                            "c657828d-d808-4aba-91a3-af2ce02300e9"});
                table524.AddRow(new string[] {
                            "3",
                            "6/1/2002 12:00:00 AM",
                            "Clothing",
                            "10a7c342-ca82-48d4-8a38-46a2eb089b74"});
                table524.AddRow(new string[] {
                            "4",
                            "6/1/2002 12:00:00 AM",
                            "Accessories",
                            "2be3be36-d9a2-4eee-b593-ed895d97c2a6"});
                table524.AddRow(new string[] {
                            "5",
                            "6/1/2002 12:00:00 AM",
                            "Mountain Bikes",
                            "2d364ade-264a-433c-b092-4fcbf3804e01"});
                table524.AddRow(new string[] {
                            "6",
                            "6/1/2002 12:00:00 AM",
                            "Road Bikes",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table524.AddRow(new string[] {
                            "7",
                            "6/1/2002 12:00:00 AM",
                            "For Delete Tests Only",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
#line 109
 await testRunner.AndAsync("the table \'Production.ProductCategory\' contains", ((string)(null)), table524, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
