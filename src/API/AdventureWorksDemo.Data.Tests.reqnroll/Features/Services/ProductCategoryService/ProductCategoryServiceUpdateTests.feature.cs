// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AdventureWorksDemo.Data.Tests.reqnroll.Features.Services.ProductCategoryService
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ProductCategoryServiceUpdateTestsFeature
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "ProductCategoryServiceUpdateTests.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Services/ProductCategoryService", "ProductCategoryServiceUpdateTests", "System tests for the ProductCategoryService\r\nTesting the methods UpdateAsync", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "ProductCategoryServiceUpdateTests")))
            {
                await global::AdventureWorksDemo.Data.Tests.reqnroll.Features.Services.ProductCategoryService.ProductCategoryServiceUpdateTestsFeature.FeatureSetupAsync(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
#line hidden
#line 8
 await testRunner.GivenAsync("The service to test is \'AdventureWorksDemo.Data.Services.IProductCategoryService\'" +
                    "", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
 await testRunner.AndAsync("I reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceUpdateTests")]
        public async System.Threading.Tasks.Task Update01()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Update01", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table87 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table87.AddRow(new string[] {
                            "41",
                            "4",
                            "Tires and Tubes",
                            "6/1/2002 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
                table87.AddRow(new string[] {
                            "42",
                            "",
                            "Record to Delete",
                            "6/1/2005 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-000000000001"});
#line 12
 await testRunner.GivenAsync("the table \'SalesLT.ProductCategory\' filtered by \'ProductCategoryId > 40\' contains" +
                        "", ((string)(null)), table87, "Given ");
#line hidden
                global::Reqnroll.Table table88 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "Name",
                            "ParentProductCategoryId"});
                table88.AddRow(new string[] {
                            "41",
                            "Ping Pong",
                            ""});
#line 16
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Models.ProductCategoryModel\'", ((string)(null)), table88, "When ");
#line hidden
                global::Reqnroll.Table table89 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table89.AddRow(new string[] {
                            "model",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 19
 await testRunner.AndAsync("I call the method \'UpdateAsync\' with the parameter values", ((string)(null)), table89, "And ");
#line hidden
                global::Reqnroll.Table table90 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table90.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<AdventureWorksDemo.Data.Models.Produ" +
                                "ctCategoryModel>"});
#line 22
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table90, "Then ");
#line hidden
                global::Reqnroll.Table table91 = new global::Reqnroll.Table(new string[] {
                            "IsException",
                            "IsFailure",
                            "IsSuccess",
                            "Message"});
                table91.AddRow(new string[] {
                            "False",
                            "False",
                            "True",
                            ""});
#line 25
 await testRunner.AndAsync("the result is", ((string)(null)), table91, "And ");
#line hidden
                global::Reqnroll.Table table92 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table92.AddRow(new string[] {
                            "41",
                            "",
                            "Ping Pong",
                            "5/24/2024 12:34:56 PM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
#line 28
 await testRunner.AndAsync("the results property \'Value\' contains", ((string)(null)), table92, "And ");
#line hidden
                global::Reqnroll.Table table93 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table93.AddRow(new string[] {
                            "41",
                            "",
                            "Ping Pong",
                            "5/24/2024 12:34:56 PM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
                table93.AddRow(new string[] {
                            "42",
                            "",
                            "Record to Delete",
                            "6/1/2005 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-000000000001"});
#line 31
 await testRunner.AndAsync("the table \'SalesLT.ProductCategory\' filtered by \'ProductCategoryId > 40\' contains" +
                        "", ((string)(null)), table93, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update02")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceUpdateTests")]
        public async System.Threading.Tasks.Task Update02()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Update02", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table94 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table94.AddRow(new string[] {
                            "41",
                            "4",
                            "Tires and Tubes",
                            "6/1/2002 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
                table94.AddRow(new string[] {
                            "42",
                            "",
                            "Record to Delete",
                            "6/1/2005 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-000000000001"});
#line 37
 await testRunner.GivenAsync("the table \'SalesLT.ProductCategory\' filtered by \'ProductCategoryId > 40\' contains" +
                        "", ((string)(null)), table94, "Given ");
#line hidden
                global::Reqnroll.Table table95 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "Name",
                            "ParentProductCategoryId"});
                table95.AddRow(new string[] {
                            "41",
                            "Ping Pong",
                            "42"});
#line 41
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Models.ProductCategoryModel\'", ((string)(null)), table95, "When ");
#line hidden
                global::Reqnroll.Table table96 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table96.AddRow(new string[] {
                            "model",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 44
 await testRunner.AndAsync("I call the method \'UpdateAsync\' with the parameter values", ((string)(null)), table96, "And ");
#line hidden
                global::Reqnroll.Table table97 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table97.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<AdventureWorksDemo.Data.Models.Produ" +
                                "ctCategoryModel>"});
#line 47
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table97, "Then ");
#line hidden
                global::Reqnroll.Table table98 = new global::Reqnroll.Table(new string[] {
                            "IsException",
                            "IsFailure",
                            "IsSuccess",
                            "Message"});
                table98.AddRow(new string[] {
                            "False",
                            "False",
                            "True",
                            ""});
#line 50
 await testRunner.AndAsync("the result is", ((string)(null)), table98, "And ");
#line hidden
                global::Reqnroll.Table table99 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table99.AddRow(new string[] {
                            "41",
                            "42",
                            "Ping Pong",
                            "5/24/2024 12:34:56 PM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
#line 53
 await testRunner.AndAsync("the results property \'Value\' contains", ((string)(null)), table99, "And ");
#line hidden
                global::Reqnroll.Table table100 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table100.AddRow(new string[] {
                            "41",
                            "42",
                            "Ping Pong",
                            "5/24/2024 12:34:56 PM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
                table100.AddRow(new string[] {
                            "42",
                            "",
                            "Record to Delete",
                            "6/1/2005 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-000000000001"});
#line 56
 await testRunner.AndAsync("the table \'SalesLT.ProductCategory\' filtered by \'ProductCategoryId > 40\' contains" +
                        "", ((string)(null)), table100, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update03")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceUpdateTests")]
        public async System.Threading.Tasks.Task Update03()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Update03", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table101 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table101.AddRow(new string[] {
                            "41",
                            "4",
                            "Tires and Tubes",
                            "6/1/2002 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
                table101.AddRow(new string[] {
                            "42",
                            "",
                            "Record to Delete",
                            "6/1/2005 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-000000000001"});
#line 61
 await testRunner.GivenAsync("the table \'SalesLT.ProductCategory\' filtered by \'ProductCategoryId > 40\' contains" +
                        "", ((string)(null)), table101, "Given ");
#line hidden
                global::Reqnroll.Table table102 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "Name",
                            "ParentProductCategoryId"});
                table102.AddRow(new string[] {
                            "41",
                            "Tires and Tubes",
                            "42"});
#line 65
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Models.ProductCategoryModel\'", ((string)(null)), table102, "When ");
#line hidden
                global::Reqnroll.Table table103 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table103.AddRow(new string[] {
                            "model",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 68
 await testRunner.AndAsync("I call the method \'UpdateAsync\' with the parameter values", ((string)(null)), table103, "And ");
#line hidden
                global::Reqnroll.Table table104 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table104.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<AdventureWorksDemo.Data.Models.Produ" +
                                "ctCategoryModel>"});
#line 71
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table104, "Then ");
#line hidden
                global::Reqnroll.Table table105 = new global::Reqnroll.Table(new string[] {
                            "IsException",
                            "IsFailure",
                            "IsSuccess",
                            "Message"});
                table105.AddRow(new string[] {
                            "False",
                            "False",
                            "True",
                            ""});
#line 74
 await testRunner.AndAsync("the result is", ((string)(null)), table105, "And ");
#line hidden
                global::Reqnroll.Table table106 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table106.AddRow(new string[] {
                            "41",
                            "42",
                            "Tires and Tubes",
                            "5/24/2024 12:34:56 PM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
#line 77
 await testRunner.AndAsync("the results property \'Value\' contains", ((string)(null)), table106, "And ");
#line hidden
                global::Reqnroll.Table table107 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table107.AddRow(new string[] {
                            "41",
                            "42",
                            "Tires and Tubes",
                            "5/24/2024 12:34:56 PM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
                table107.AddRow(new string[] {
                            "42",
                            "",
                            "Record to Delete",
                            "6/1/2005 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-000000000001"});
#line 80
 await testRunner.AndAsync("the table \'SalesLT.ProductCategory\' filtered by \'ProductCategoryId > 40\' contains" +
                        "", ((string)(null)), table107, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UpdateNoChange")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceUpdateTests")]
        public async System.Threading.Tasks.Task UpdateNoChange()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("UpdateNoChange", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 106
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 107
 await testRunner.GivenAsync("I don\'t reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table108 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name"});
                table108.AddRow(new string[] {
                            "41",
                            "4",
                            "Tires and Tubes"});
#line 108
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Models.ProductCategoryModel\'", ((string)(null)), table108, "When ");
#line hidden
                global::Reqnroll.Table table109 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table109.AddRow(new string[] {
                            "model",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 111
 await testRunner.AndAsync("I call the method \'UpdateAsync\' with the parameter values", ((string)(null)), table109, "And ");
#line hidden
                global::Reqnroll.Table table110 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table110.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<AdventureWorksDemo.Data.Models.Produ" +
                                "ctCategoryModel>"});
#line 114
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table110, "Then ");
#line hidden
                global::Reqnroll.Table table111 = new global::Reqnroll.Table(new string[] {
                            "IsException",
                            "IsFailure",
                            "IsSuccess",
                            "Message"});
                table111.AddRow(new string[] {
                            "False",
                            "False",
                            "True",
                            ""});
#line 117
 await testRunner.AndAsync("the result is", ((string)(null)), table111, "And ");
#line hidden
                global::Reqnroll.Table table112 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table112.AddRow(new string[] {
                            "41",
                            "4",
                            "Tires and Tubes",
                            "6/1/2002 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
#line 120
 await testRunner.AndAsync("the results property \'Value\' contains", ((string)(null)), table112, "And ");
#line hidden
                global::Reqnroll.Table table113 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table113.AddRow(new string[] {
                            "41",
                            "4",
                            "Tires and Tubes",
                            "6/1/2002 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
                table113.AddRow(new string[] {
                            "42",
                            "",
                            "Record to Delete",
                            "6/1/2005 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-000000000001"});
#line 123
 await testRunner.AndAsync("the table \'SalesLT.ProductCategory\' filtered by \'ProductCategoryId > 40\' contains" +
                        "", ((string)(null)), table113, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("UpdateUnknownRecord")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceUpdateTests")]
        public async System.Threading.Tasks.Task UpdateUnknownRecord()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("UpdateUnknownRecord", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 127
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 128
 await testRunner.GivenAsync("I don\'t reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table114 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name"});
                table114.AddRow(new string[] {
                            "1234",
                            "4",
                            "Tires and Tubes"});
#line 129
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Models.ProductCategoryModel\'", ((string)(null)), table114, "When ");
#line hidden
                global::Reqnroll.Table table115 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table115.AddRow(new string[] {
                            "model",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 132
 await testRunner.AndAsync("I call the method \'UpdateAsync\' with the parameter values", ((string)(null)), table115, "And ");
#line hidden
                global::Reqnroll.Table table116 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table116.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<AdventureWorksDemo.Data.Models.Produ" +
                                "ctCategoryModel>"});
#line 135
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table116, "Then ");
#line hidden
                global::Reqnroll.Table table117 = new global::Reqnroll.Table(new string[] {
                            "IsException",
                            "IsFailure",
                            "IsSuccess",
                            "Message"});
                table117.AddRow(new string[] {
                            "False",
                            "False",
                            "True",
                            ""});
#line 138
 await testRunner.AndAsync("the result is", ((string)(null)), table117, "And ");
#line hidden
                global::Reqnroll.Table table118 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table118.AddRow(new string[] {
                            "41",
                            "4",
                            "Tires and Tubes",
                            "6/1/2002 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
#line 141
 await testRunner.AndAsync("the results property \'Value\' contains", ((string)(null)), table118, "And ");
#line hidden
                global::Reqnroll.Table table119 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table119.AddRow(new string[] {
                            "41",
                            "4",
                            "Tires and Tubes",
                            "6/1/2002 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
                table119.AddRow(new string[] {
                            "42",
                            "",
                            "Record to Delete",
                            "6/1/2005 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-000000000001"});
#line 144
 await testRunner.AndAsync("the table \'SalesLT.ProductCategory\' filtered by \'ProductCategoryId > 40\' contains" +
                        "", ((string)(null)), table119, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
