// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AdventureWorksDemo.Data.Tests.reqnroll.Features.Services.ProductCategoryService
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ProductCategoryServiceTestsFeature
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "ProductCategoryServiceFindTests.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, System.Threading.Thread.CurrentThread.ManagedThreadId.ToString());
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Services/ProductCategoryService", "ProductCategoryServiceTests", "System tests for the ProductCategoryService", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "ProductCategoryServiceTests")))
            {
                await global::AdventureWorksDemo.Data.Tests.reqnroll.Features.Services.ProductCategoryService.ProductCategoryServiceTestsFeature.FeatureSetupAsync(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 5
#line hidden
#line 6
 await testRunner.GivenAsync("The service to test is \'AdventureWorksDemo.Data.Services.IProductCategoryService\'" +
                    "", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAsync01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceTests")]
        public async System.Threading.Tasks.Task FindAsync01()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAsync01", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table1.AddRow(new string[] {
                            "productCategoryId",
                            "1",
                            "int"});
#line 9
 await testRunner.WhenAsync("I call the method \'FindAsync\' with the parameter values", ((string)(null)), table1, "When ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table2.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 12
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table2, "Then ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "ModifiedDate",
                            "Name",
                            "ParentProductCategoryId",
                            "ProductCategoryId",
                            "Rowguid"});
                table3.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Bikes",
                            "",
                            "1",
                            "cfbda25c-df71-47a7-b81b-64ee161aa37c"});
#line 15
 await testRunner.AndAsync("the result is", ((string)(null)), table3, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAsync04")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceTests")]
        public async System.Threading.Tasks.Task FindAsync04()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAsync04", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table4.AddRow(new string[] {
                            "productCategoryId",
                            "4",
                            "int"});
#line 20
 await testRunner.WhenAsync("I call the method \'FindAsync\' with the parameter values", ((string)(null)), table4, "When ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table5.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 23
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table5, "Then ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "ModifiedDate",
                            "Name",
                            "ParentProductCategoryId",
                            "ProductCategoryId",
                            "Rowguid"});
                table6.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Accessories",
                            "",
                            "4",
                            "2be3be36-d9a2-4eee-b593-ed895d97c2a6"});
#line 26
 await testRunner.AndAsync("the result is", ((string)(null)), table6, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAsync1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceTests")]
        public async System.Threading.Tasks.Task FindAsync1234()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAsync1234", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table7.AddRow(new string[] {
                            "productCategoryId",
                            "1234",
                            "int"});
#line 31
 await testRunner.WhenAsync("I call the method \'FindAsync\' with the parameter values", ((string)(null)), table7, "When ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table8.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 35
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table8, "Then ");
#line hidden
#line 38
 await testRunner.AndAsync("the result is null", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAllAsync_1_5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceTests")]
        public async System.Threading.Tasks.Task FindAllAsync_1_5()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAllAsync_1_5", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "PageNumber",
                            "PageSize"});
                table9.AddRow(new string[] {
                            "1",
                            "5"});
#line 41
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Paging.PagingFilter\'", ((string)(null)), table9, "When ");
#line hidden
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table10.AddRow(new string[] {
                            "pageingFilter",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Paging.PagingFilter"});
#line 44
 await testRunner.AndAsync("I call the method \'FindAllAsync\' with the parameter values", ((string)(null)), table10, "And ");
#line hidden
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table11.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Paging.PagedList<AdventureWorksDemo.Data.Models.ProductCa" +
                                "tegoryModel>"});
#line 47
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table11, "Then ");
#line hidden
                global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                            "TotalPages",
                            "TotalCount",
                            "PageSize",
                            "CurrentPage",
                            "Count",
                            "Capacity"});
                table12.AddRow(new string[] {
                            "9",
                            "41",
                            "5",
                            "1",
                            "5",
                            "5"});
#line 50
 await testRunner.AndAsync("the PagedList values are", ((string)(null)), table12, "And ");
#line hidden
                global::Reqnroll.Table table13 = new global::Reqnroll.Table(new string[] {
                            "ModifiedDate",
                            "Name",
                            "ParentProductCategoryId",
                            "ProductCategoryId",
                            "Rowguid"});
                table13.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Accessories",
                            "",
                            "4",
                            "2be3be36-d9a2-4eee-b593-ed895d97c2a6"});
                table13.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Bikes",
                            "",
                            "1",
                            "cfbda25c-df71-47a7-b81b-64ee161aa37c"});
                table13.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Components",
                            "",
                            "2",
                            "c657828d-d808-4aba-91a3-af2ce02300e9"});
                table13.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Clothing",
                            "",
                            "3",
                            "10a7c342-ca82-48d4-8a38-46a2eb089b74"});
                table13.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Mountain Bikes",
                            "1",
                            "5",
                            "2d364ade-264a-433c-b092-4fcbf3804e01"});
#line 53
 await testRunner.AndAsync("the results are", ((string)(null)), table13, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAllAsync_2_5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceTests")]
        public async System.Threading.Tasks.Task FindAllAsync_2_5()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAllAsync_2_5", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table14 = new global::Reqnroll.Table(new string[] {
                            "PageNumber",
                            "PageSize"});
                table14.AddRow(new string[] {
                            "2",
                            "5"});
#line 62
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Paging.PagingFilter\'", ((string)(null)), table14, "When ");
#line hidden
                global::Reqnroll.Table table15 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table15.AddRow(new string[] {
                            "pageingFilter",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Paging.PagingFilter"});
#line 65
 await testRunner.AndAsync("I call the method \'FindAllAsync\' with the parameter values", ((string)(null)), table15, "And ");
#line hidden
                global::Reqnroll.Table table16 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table16.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Paging.PagedList<AdventureWorksDemo.Data.Models.ProductCa" +
                                "tegoryModel>"});
#line 68
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table16, "Then ");
#line hidden
                global::Reqnroll.Table table17 = new global::Reqnroll.Table(new string[] {
                            "TotalPages",
                            "TotalCount",
                            "PageSize",
                            "CurrentPage",
                            "Count",
                            "Capacity"});
                table17.AddRow(new string[] {
                            "9",
                            "41",
                            "5",
                            "2",
                            "5",
                            "5"});
#line 71
 await testRunner.AndAsync("the PagedList values are", ((string)(null)), table17, "And ");
#line hidden
                global::Reqnroll.Table table18 = new global::Reqnroll.Table(new string[] {
                            "ModifiedDate",
                            "Name",
                            "ParentProductCategoryId",
                            "ProductCategoryId",
                            "Rowguid"});
                table18.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Road Bikes",
                            "1",
                            "6",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table18.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Touring Bikes",
                            "1",
                            "7",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
                table18.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Handlebars",
                            "2",
                            "8",
                            "3ef2c725-7135-4c85-9ae6-ae9a3bdd9283"});
                table18.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Bottom Brackets",
                            "2",
                            "9",
                            "a9e54089-8a1e-4cf5-8646-e3801f685934"});
                table18.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Brakes",
                            "2",
                            "10",
                            "d43ba4a3-ef0d-426b-90eb-4be4547dd30c"});
#line 74
 await testRunner.AndAsync("the results are", ((string)(null)), table18, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAllAsync_2_8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceTests")]
        public async System.Threading.Tasks.Task FindAllAsync_2_8()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAllAsync_2_8", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table19 = new global::Reqnroll.Table(new string[] {
                            "PageNumber",
                            "PageSize"});
                table19.AddRow(new string[] {
                            "2",
                            "8"});
#line 83
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Paging.PagingFilter\'", ((string)(null)), table19, "When ");
#line hidden
                global::Reqnroll.Table table20 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table20.AddRow(new string[] {
                            "pageingFilter",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Paging.PagingFilter"});
#line 86
 await testRunner.AndAsync("I call the method \'FindAllAsync\' with the parameter values", ((string)(null)), table20, "And ");
#line hidden
                global::Reqnroll.Table table21 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table21.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Paging.PagedList<AdventureWorksDemo.Data.Models.ProductCa" +
                                "tegoryModel>"});
#line 89
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table21, "Then ");
#line hidden
                global::Reqnroll.Table table22 = new global::Reqnroll.Table(new string[] {
                            "TotalPages",
                            "TotalCount",
                            "PageSize",
                            "CurrentPage",
                            "Count",
                            "Capacity"});
                table22.AddRow(new string[] {
                            "6",
                            "41",
                            "8",
                            "2",
                            "8",
                            "8"});
#line 92
 await testRunner.AndAsync("the PagedList values are", ((string)(null)), table22, "And ");
#line hidden
                global::Reqnroll.Table table23 = new global::Reqnroll.Table(new string[] {
                            "ModifiedDate",
                            "Name",
                            "ParentProductCategoryId",
                            "ProductCategoryId",
                            "Rowguid"});
                table23.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Bottom Brackets",
                            "2",
                            "9",
                            "a9e54089-8a1e-4cf5-8646-e3801f685934"});
                table23.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Brakes",
                            "2",
                            "10",
                            "d43ba4a3-ef0d-426b-90eb-4be4547dd30c"});
                table23.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Chains",
                            "2",
                            "11",
                            "e93a7231-f16c-4b0f-8c41-c73fdec62da0"});
                table23.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Cranksets",
                            "2",
                            "12",
                            "4f644521-422b-4f19-974a-e3df6102567e"});
                table23.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Derailleurs",
                            "2",
                            "13",
                            "1830d70c-aa2a-40c0-a271-5ba86f38f8bf"});
                table23.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Forks",
                            "2",
                            "14",
                            "b5f9ba42-b69b-4fdd-b2ec-57fb7b42e3cf"});
                table23.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Headsets",
                            "2",
                            "15",
                            "7c782bbe-5a16-495a-aa50-10afe5a84af2"});
                table23.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Mountain Frames",
                            "2",
                            "16",
                            "61b21b65-e16a-4be7-9300-4d8e9db861be"});
#line 95
 await testRunner.AndAsync("the results are", ((string)(null)), table23, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAllAsync_1234_5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceTests")]
        public async System.Threading.Tasks.Task FindAllAsync_1234_5()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAllAsync_1234_5", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 106
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table24 = new global::Reqnroll.Table(new string[] {
                            "PageNumber",
                            "PageSize"});
                table24.AddRow(new string[] {
                            "1234",
                            "5"});
#line 107
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Paging.PagingFilter\'", ((string)(null)), table24, "When ");
#line hidden
                global::Reqnroll.Table table25 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table25.AddRow(new string[] {
                            "pageingFilter",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Paging.PagingFilter"});
#line 110
 await testRunner.AndAsync("I call the method \'FindAllAsync\' with the parameter values", ((string)(null)), table25, "And ");
#line hidden
                global::Reqnroll.Table table26 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table26.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Paging.PagedList<AdventureWorksDemo.Data.Models.ProductCa" +
                                "tegoryModel>"});
#line 113
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table26, "Then ");
#line hidden
                global::Reqnroll.Table table27 = new global::Reqnroll.Table(new string[] {
                            "TotalPages",
                            "TotalCount",
                            "PageSize",
                            "CurrentPage",
                            "Count",
                            "Capacity"});
                table27.AddRow(new string[] {
                            "9",
                            "41",
                            "5",
                            "1234",
                            "0",
                            "0"});
#line 116
 await testRunner.AndAsync("the PagedList values are", ((string)(null)), table27, "And ");
#line hidden
                global::Reqnroll.Table table28 = new global::Reqnroll.Table(new string[] {
                            "ModifiedDate",
                            "Name",
                            "ParentProductCategoryId",
                            "ProductCategoryId",
                            "Rowguid"});
#line 119
 await testRunner.AndAsync("the results are", ((string)(null)), table28, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAllAsync_0_5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceTests")]
        public async System.Threading.Tasks.Task FindAllAsync_0_5()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAllAsync_0_5", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 122
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table29 = new global::Reqnroll.Table(new string[] {
                            "PageNumber",
                            "PageSize"});
                table29.AddRow(new string[] {
                            "0",
                            "5"});
#line 123
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Paging.PagingFilter\'", ((string)(null)), table29, "When ");
#line hidden
                global::Reqnroll.Table table30 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table30.AddRow(new string[] {
                            "pageingFilter",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Paging.PagingFilter"});
#line 126
 await testRunner.AndAsync("I call the method \'FindAllAsync\' with the parameter values", ((string)(null)), table30, "And ");
#line hidden
                global::Reqnroll.Table table31 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table31.AddRow(new string[] {
                            "System.ArgumentOutOfRangeException"});
#line 129
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table31, "Then ");
#line hidden
                global::Reqnroll.Table table32 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table32.AddRow(new string[] {
                            "Parameter pageNumber must be positive (Parameter \'pageNumber\')"});
#line 132
 await testRunner.AndAsync("the exception message is", ((string)(null)), table32, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAllAsync_0_0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceTests")]
        public async System.Threading.Tasks.Task FindAllAsync_0_0()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAllAsync_0_0", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 136
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table33 = new global::Reqnroll.Table(new string[] {
                            "PageNumber",
                            "PageSize"});
                table33.AddRow(new string[] {
                            "0",
                            "0"});
#line 137
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Paging.PagingFilter\'", ((string)(null)), table33, "When ");
#line hidden
                global::Reqnroll.Table table34 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table34.AddRow(new string[] {
                            "pageingFilter",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Paging.PagingFilter"});
#line 140
 await testRunner.AndAsync("I call the method \'FindAllAsync\' with the parameter values", ((string)(null)), table34, "And ");
#line hidden
                global::Reqnroll.Table table35 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table35.AddRow(new string[] {
                            "System.ArgumentOutOfRangeException"});
#line 143
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table35, "Then ");
#line hidden
                global::Reqnroll.Table table36 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table36.AddRow(new string[] {
                            "Parameter pageNumber must be positive (Parameter \'pageNumber\')"});
#line 146
 await testRunner.AndAsync("the exception message is", ((string)(null)), table36, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAllAsync_5_0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceTests")]
        public async System.Threading.Tasks.Task FindAllAsync_5_0()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAllAsync_5_0", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 150
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table37 = new global::Reqnroll.Table(new string[] {
                            "PageNumber",
                            "PageSize"});
                table37.AddRow(new string[] {
                            "5",
                            "0"});
#line 151
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Paging.PagingFilter\'", ((string)(null)), table37, "When ");
#line hidden
                global::Reqnroll.Table table38 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table38.AddRow(new string[] {
                            "pageingFilter",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Paging.PagingFilter"});
#line 154
 await testRunner.AndAsync("I call the method \'FindAllAsync\' with the parameter values", ((string)(null)), table38, "And ");
#line hidden
                global::Reqnroll.Table table39 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table39.AddRow(new string[] {
                            "System.ArgumentOutOfRangeException"});
#line 157
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table39, "Then ");
#line hidden
                global::Reqnroll.Table table40 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table40.AddRow(new string[] {
                            "Parameter pageSize must be positive (Parameter \'pageSize\')"});
#line 160
 await testRunner.AndAsync("the exception message is", ((string)(null)), table40, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
