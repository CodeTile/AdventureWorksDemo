// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AdventureWorksDemo.Data.Tests.reqnroll.Features.Services.ProductCategoryService
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ProductCategoryServiceFindTestsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Services/ProductCategoryService", "ProductCategoryServiceFindTests", "System tests for the ProductCategoryService\r\nTesting the methods FindAsync and Fi" +
                "ndAllAsync", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "ProductCategoryServiceFindTests.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
#line hidden
#line 8
 await testRunner.GivenAsync("The service to test is \'AdventureWorksDemo.Data.Services.IProductCategoryService\'" +
                    "", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAsync01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceFindTests")]
        public async System.Threading.Tasks.Task FindAsync01()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAsync01", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table422 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table422.AddRow(new string[] {
                            "productCategoryId",
                            "1",
                            "int"});
#line 11
 await testRunner.WhenAsync("I call the method \'FindAsync\' with the parameter values", ((string)(null)), table422, "When ");
#line hidden
                global::Reqnroll.Table table423 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table423.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 14
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table423, "Then ");
#line hidden
                global::Reqnroll.Table table424 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table424.AddRow(new string[] {
                            "1",
                            "6/1/2002 12:00:00 AM",
                            "Bikes",
                            "cfbda25c-df71-47a7-b81b-64ee161aa37c"});
#line 17
 await testRunner.AndAsync("the result is", ((string)(null)), table424, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAsync04")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceFindTests")]
        public async System.Threading.Tasks.Task FindAsync04()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAsync04", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table425 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table425.AddRow(new string[] {
                            "productCategoryId",
                            "4",
                            "int"});
#line 22
 await testRunner.WhenAsync("I call the method \'FindAsync\' with the parameter values", ((string)(null)), table425, "When ");
#line hidden
                global::Reqnroll.Table table426 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table426.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 25
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table426, "Then ");
#line hidden
                global::Reqnroll.Table table427 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table427.AddRow(new string[] {
                            "4",
                            "6/1/2002 12:00:00 AM",
                            "Accessories",
                            "2be3be36-d9a2-4eee-b593-ed895d97c2a6"});
#line 28
 await testRunner.AndAsync("the result is", ((string)(null)), table427, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAllAsync_0_5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceFindTests")]
        public async System.Threading.Tasks.Task FindAllAsync_0_5()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAllAsync_0_5", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table428 = new global::Reqnroll.Table(new string[] {
                            "PageNumber",
                            "PageSize"});
                table428.AddRow(new string[] {
                            "0",
                            "5"});
#line 33
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Paging.PagingFilter\'", ((string)(null)), table428, "When ");
#line hidden
                global::Reqnroll.Table table429 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table429.AddRow(new string[] {
                            "pageingFilter",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Paging.PagingFilter"});
#line 36
 await testRunner.AndAsync("I call the method \'FindAllAsync\' with the parameter values", ((string)(null)), table429, "And ");
#line hidden
                global::Reqnroll.Table table430 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table430.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Paging.PagedList<AdventureWorksDemo.Data.Models.ProductCa" +
                                "tegoryModel>"});
#line 39
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table430, "Then ");
#line hidden
                global::Reqnroll.Table table431 = new global::Reqnroll.Table(new string[] {
                            "TotalPages",
                            "TotalCount",
                            "PageSize",
                            "CurrentPage"});
                table431.AddRow(new string[] {
                            "2",
                            "7",
                            "5",
                            "0"});
#line 43
 await testRunner.AndAsync("the PagedList values are", ((string)(null)), table431, "And ");
#line hidden
                global::Reqnroll.Table table432 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table432.AddRow(new string[] {
                            "1",
                            "6/1/2002 12:00:00 AM",
                            "Bikes",
                            "cfbda25c-df71-47a7-b81b-64ee161aa37c"});
                table432.AddRow(new string[] {
                            "2",
                            "6/1/2002 12:00:00 AM",
                            "Components",
                            "c657828d-d808-4aba-91a3-af2ce02300e9"});
                table432.AddRow(new string[] {
                            "3",
                            "6/1/2002 12:00:00 AM",
                            "Clothing",
                            "10a7c342-ca82-48d4-8a38-46a2eb089b74"});
                table432.AddRow(new string[] {
                            "4",
                            "6/1/2002 12:00:00 AM",
                            "Accessories",
                            "2be3be36-d9a2-4eee-b593-ed895d97c2a6"});
                table432.AddRow(new string[] {
                            "5",
                            "6/1/2002 12:00:00 AM",
                            "Mountain Bikes",
                            "2d364ade-264a-433c-b092-4fcbf3804e01"});
#line 46
 await testRunner.AndAsync("the sorted results are", ((string)(null)), table432, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAllAsync_0_0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceFindTests")]
        public async System.Threading.Tasks.Task FindAllAsync_0_0()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAllAsync_0_0", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table433 = new global::Reqnroll.Table(new string[] {
                            "PageNumber",
                            "PageSize"});
                table433.AddRow(new string[] {
                            "0",
                            "0"});
#line 55
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Paging.PagingFilter\'", ((string)(null)), table433, "When ");
#line hidden
                global::Reqnroll.Table table434 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table434.AddRow(new string[] {
                            "pageingFilter",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Paging.PagingFilter"});
#line 58
 await testRunner.AndAsync("I call the method \'FindAllAsync\' with the parameter values", ((string)(null)), table434, "And ");
#line hidden
                global::Reqnroll.Table table435 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table435.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Paging.PagedList<AdventureWorksDemo.Data.Models.ProductCa" +
                                "tegoryModel>"});
#line 61
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table435, "Then ");
#line hidden
                global::Reqnroll.Table table436 = new global::Reqnroll.Table(new string[] {
                            "TotalPages",
                            "TotalCount",
                            "PageSize",
                            "CurrentPage"});
                table436.AddRow(new string[] {
                            "1",
                            "7",
                            "25",
                            "0"});
#line 65
 await testRunner.AndAsync("the PagedList values are", ((string)(null)), table436, "And ");
#line hidden
                global::Reqnroll.Table table437 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table437.AddRow(new string[] {
                            "1",
                            "6/1/2002 12:00:00 AM",
                            "Bikes",
                            "cfbda25c-df71-47a7-b81b-64ee161aa37c"});
                table437.AddRow(new string[] {
                            "2",
                            "6/1/2002 12:00:00 AM",
                            "Components",
                            "c657828d-d808-4aba-91a3-af2ce02300e9"});
                table437.AddRow(new string[] {
                            "3",
                            "6/1/2002 12:00:00 AM",
                            "Clothing",
                            "10a7c342-ca82-48d4-8a38-46a2eb089b74"});
                table437.AddRow(new string[] {
                            "4",
                            "6/1/2002 12:00:00 AM",
                            "Accessories",
                            "2be3be36-d9a2-4eee-b593-ed895d97c2a6"});
                table437.AddRow(new string[] {
                            "5",
                            "6/1/2002 12:00:00 AM",
                            "Mountain Bikes",
                            "2d364ade-264a-433c-b092-4fcbf3804e01"});
                table437.AddRow(new string[] {
                            "6",
                            "6/1/2002 12:00:00 AM",
                            "Road Bikes",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table437.AddRow(new string[] {
                            "7",
                            "6/1/2002 12:00:00 AM",
                            "For Delete Tests Only",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
#line 68
 await testRunner.AndAsync("the sorted results are", ((string)(null)), table437, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAllAsync_0_500")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceFindTests")]
        public async System.Threading.Tasks.Task FindAllAsync_0_500()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAllAsync_0_500", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table438 = new global::Reqnroll.Table(new string[] {
                            "PageNumber",
                            "PageSize"});
                table438.AddRow(new string[] {
                            "0",
                            "500"});
#line 80
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Paging.PagingFilter\'", ((string)(null)), table438, "When ");
#line hidden
                global::Reqnroll.Table table439 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table439.AddRow(new string[] {
                            "pageingFilter",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Paging.PagingFilter"});
#line 83
 await testRunner.AndAsync("I call the method \'FindAllAsync\' with the parameter values", ((string)(null)), table439, "And ");
#line hidden
                global::Reqnroll.Table table440 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table440.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Paging.PagedList<AdventureWorksDemo.Data.Models.ProductCa" +
                                "tegoryModel>"});
#line 86
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table440, "Then ");
#line hidden
                global::Reqnroll.Table table441 = new global::Reqnroll.Table(new string[] {
                            "TotalPages",
                            "TotalCount",
                            "PageSize",
                            "CurrentPage"});
                table441.AddRow(new string[] {
                            "1",
                            "7",
                            "100",
                            "0"});
#line 89
 await testRunner.AndAsync("the PagedList values are", ((string)(null)), table441, "And ");
#line hidden
                global::Reqnroll.Table table442 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table442.AddRow(new string[] {
                            "1",
                            "6/1/2002 12:00:00 AM",
                            "Bikes",
                            "cfbda25c-df71-47a7-b81b-64ee161aa37c"});
                table442.AddRow(new string[] {
                            "2",
                            "6/1/2002 12:00:00 AM",
                            "Components",
                            "c657828d-d808-4aba-91a3-af2ce02300e9"});
                table442.AddRow(new string[] {
                            "3",
                            "6/1/2002 12:00:00 AM",
                            "Clothing",
                            "10a7c342-ca82-48d4-8a38-46a2eb089b74"});
                table442.AddRow(new string[] {
                            "4",
                            "6/1/2002 12:00:00 AM",
                            "Accessories",
                            "2be3be36-d9a2-4eee-b593-ed895d97c2a6"});
                table442.AddRow(new string[] {
                            "5",
                            "6/1/2002 12:00:00 AM",
                            "Mountain Bikes",
                            "2d364ade-264a-433c-b092-4fcbf3804e01"});
                table442.AddRow(new string[] {
                            "6",
                            "6/1/2002 12:00:00 AM",
                            "Road Bikes",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table442.AddRow(new string[] {
                            "7",
                            "6/1/2002 12:00:00 AM",
                            "For Delete Tests Only",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
#line 92
 await testRunner.AndAsync("the sorted results are", ((string)(null)), table442, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAllAsync_0_500_Sort_ProductCategoryId")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceFindTests")]
        public async System.Threading.Tasks.Task FindAllAsync_0_500_Sort_ProductCategoryId()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAllAsync_0_500_Sort_ProductCategoryId", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 103
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table443 = new global::Reqnroll.Table(new string[] {
                            "PageNumber",
                            "PageSize",
                            "Sorting"});
                table443.AddRow(new string[] {
                            "0",
                            "500",
                            "ProductCategoryId"});
#line 104
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Paging.PagingFilter\'", ((string)(null)), table443, "When ");
#line hidden
                global::Reqnroll.Table table444 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table444.AddRow(new string[] {
                            "pageingFilter",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Paging.PagingFilter"});
#line 107
 await testRunner.AndAsync("I call the method \'FindAllAsync\' with the parameter values", ((string)(null)), table444, "And ");
#line hidden
                global::Reqnroll.Table table445 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table445.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Paging.PagedList<AdventureWorksDemo.Data.Models.ProductCa" +
                                "tegoryModel>"});
#line 110
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table445, "Then ");
#line hidden
                global::Reqnroll.Table table446 = new global::Reqnroll.Table(new string[] {
                            "TotalPages",
                            "TotalCount",
                            "PageSize",
                            "CurrentPage"});
                table446.AddRow(new string[] {
                            "1",
                            "7",
                            "100",
                            "0"});
#line 113
 await testRunner.AndAsync("the PagedList values are", ((string)(null)), table446, "And ");
#line hidden
                global::Reqnroll.Table table447 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table447.AddRow(new string[] {
                            "1",
                            "6/1/2002 12:00:00 AM",
                            "Bikes",
                            "cfbda25c-df71-47a7-b81b-64ee161aa37c"});
                table447.AddRow(new string[] {
                            "2",
                            "6/1/2002 12:00:00 AM",
                            "Components",
                            "c657828d-d808-4aba-91a3-af2ce02300e9"});
                table447.AddRow(new string[] {
                            "3",
                            "6/1/2002 12:00:00 AM",
                            "Clothing",
                            "10a7c342-ca82-48d4-8a38-46a2eb089b74"});
                table447.AddRow(new string[] {
                            "4",
                            "6/1/2002 12:00:00 AM",
                            "Accessories",
                            "2be3be36-d9a2-4eee-b593-ed895d97c2a6"});
                table447.AddRow(new string[] {
                            "5",
                            "6/1/2002 12:00:00 AM",
                            "Mountain Bikes",
                            "2d364ade-264a-433c-b092-4fcbf3804e01"});
                table447.AddRow(new string[] {
                            "6",
                            "6/1/2002 12:00:00 AM",
                            "Road Bikes",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table447.AddRow(new string[] {
                            "7",
                            "6/1/2002 12:00:00 AM",
                            "For Delete Tests Only",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
#line 116
 await testRunner.AndAsync("the sorted results are", ((string)(null)), table447, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAllAsync_0_500_Sort_ProductCategoryIdDesc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceFindTests")]
        public async System.Threading.Tasks.Task FindAllAsync_0_500_Sort_ProductCategoryIdDesc()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAllAsync_0_500_Sort_ProductCategoryIdDesc", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 127
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table448 = new global::Reqnroll.Table(new string[] {
                            "PageNumber",
                            "PageSize",
                            "Sorting"});
                table448.AddRow(new string[] {
                            "0",
                            "500",
                            "ProductCategoryId DESC"});
#line 128
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Paging.PagingFilter\'", ((string)(null)), table448, "When ");
#line hidden
                global::Reqnroll.Table table449 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table449.AddRow(new string[] {
                            "pageingFilter",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Paging.PagingFilter"});
#line 131
 await testRunner.AndAsync("I call the method \'FindAllAsync\' with the parameter values", ((string)(null)), table449, "And ");
#line hidden
                global::Reqnroll.Table table450 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table450.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Paging.PagedList<AdventureWorksDemo.Data.Models.ProductCa" +
                                "tegoryModel>"});
#line 134
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table450, "Then ");
#line hidden
                global::Reqnroll.Table table451 = new global::Reqnroll.Table(new string[] {
                            "TotalPages",
                            "TotalCount",
                            "PageSize",
                            "CurrentPage"});
                table451.AddRow(new string[] {
                            "1",
                            "7",
                            "100",
                            "0"});
#line 137
 await testRunner.AndAsync("the PagedList values are", ((string)(null)), table451, "And ");
#line hidden
                global::Reqnroll.Table table452 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table452.AddRow(new string[] {
                            "7",
                            "6/1/2002 12:00:00 AM",
                            "For Delete Tests Only",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
                table452.AddRow(new string[] {
                            "6",
                            "6/1/2002 12:00:00 AM",
                            "Road Bikes",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table452.AddRow(new string[] {
                            "5",
                            "6/1/2002 12:00:00 AM",
                            "Mountain Bikes",
                            "2d364ade-264a-433c-b092-4fcbf3804e01"});
                table452.AddRow(new string[] {
                            "4",
                            "6/1/2002 12:00:00 AM",
                            "Accessories",
                            "2be3be36-d9a2-4eee-b593-ed895d97c2a6"});
                table452.AddRow(new string[] {
                            "3",
                            "6/1/2002 12:00:00 AM",
                            "Clothing",
                            "10a7c342-ca82-48d4-8a38-46a2eb089b74"});
                table452.AddRow(new string[] {
                            "2",
                            "6/1/2002 12:00:00 AM",
                            "Components",
                            "c657828d-d808-4aba-91a3-af2ce02300e9"});
                table452.AddRow(new string[] {
                            "1",
                            "6/1/2002 12:00:00 AM",
                            "Bikes",
                            "cfbda25c-df71-47a7-b81b-64ee161aa37c"});
#line 140
 await testRunner.AndAsync("the sorted results are", ((string)(null)), table452, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAllAsync_0_500_Sort_ProductCategoryIdASC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceFindTests")]
        public async System.Threading.Tasks.Task FindAllAsync_0_500_Sort_ProductCategoryIdASC()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAllAsync_0_500_Sort_ProductCategoryIdASC", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 151
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table453 = new global::Reqnroll.Table(new string[] {
                            "PageNumber",
                            "PageSize",
                            "Sorting"});
                table453.AddRow(new string[] {
                            "0",
                            "500",
                            "ProductCategoryId ASC"});
#line 152
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Paging.PagingFilter\'", ((string)(null)), table453, "When ");
#line hidden
                global::Reqnroll.Table table454 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table454.AddRow(new string[] {
                            "pageingFilter",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Paging.PagingFilter"});
#line 155
 await testRunner.AndAsync("I call the method \'FindAllAsync\' with the parameter values", ((string)(null)), table454, "And ");
#line hidden
                global::Reqnroll.Table table455 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table455.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Paging.PagedList<AdventureWorksDemo.Data.Models.ProductCa" +
                                "tegoryModel>"});
#line 158
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table455, "Then ");
#line hidden
                global::Reqnroll.Table table456 = new global::Reqnroll.Table(new string[] {
                            "TotalPages",
                            "TotalCount",
                            "PageSize",
                            "CurrentPage"});
                table456.AddRow(new string[] {
                            "1",
                            "7",
                            "100",
                            "0"});
#line 161
 await testRunner.AndAsync("the PagedList values are", ((string)(null)), table456, "And ");
#line hidden
                global::Reqnroll.Table table457 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table457.AddRow(new string[] {
                            "1",
                            "6/1/2002 12:00:00 AM",
                            "Bikes",
                            "cfbda25c-df71-47a7-b81b-64ee161aa37c"});
                table457.AddRow(new string[] {
                            "2",
                            "6/1/2002 12:00:00 AM",
                            "Components",
                            "c657828d-d808-4aba-91a3-af2ce02300e9"});
                table457.AddRow(new string[] {
                            "3",
                            "6/1/2002 12:00:00 AM",
                            "Clothing",
                            "10a7c342-ca82-48d4-8a38-46a2eb089b74"});
                table457.AddRow(new string[] {
                            "4",
                            "6/1/2002 12:00:00 AM",
                            "Accessories",
                            "2be3be36-d9a2-4eee-b593-ed895d97c2a6"});
                table457.AddRow(new string[] {
                            "5",
                            "6/1/2002 12:00:00 AM",
                            "Mountain Bikes",
                            "2d364ade-264a-433c-b092-4fcbf3804e01"});
                table457.AddRow(new string[] {
                            "6",
                            "6/1/2002 12:00:00 AM",
                            "Road Bikes",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table457.AddRow(new string[] {
                            "7",
                            "6/1/2002 12:00:00 AM",
                            "For Delete Tests Only",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
#line 164
 await testRunner.AndAsync("the sorted results are", ((string)(null)), table457, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAsync1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceFindTests")]
        public async System.Threading.Tasks.Task FindAsync1234()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAsync1234", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 174
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table458 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table458.AddRow(new string[] {
                            "productCategoryId",
                            "1234",
                            "int"});
#line 175
 await testRunner.WhenAsync("I call the method \'FindAsync\' with the parameter values", ((string)(null)), table458, "When ");
#line hidden
                global::Reqnroll.Table table459 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table459.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 179
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table459, "Then ");
#line hidden
#line 182
 await testRunner.AndAsync("the result is null", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAllAsync_1_5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceFindTests")]
        public async System.Threading.Tasks.Task FindAllAsync_1_5()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAllAsync_1_5", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 184
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table460 = new global::Reqnroll.Table(new string[] {
                            "PageNumber",
                            "PageSize"});
                table460.AddRow(new string[] {
                            "1",
                            "5"});
#line 185
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Paging.PagingFilter\'", ((string)(null)), table460, "When ");
#line hidden
                global::Reqnroll.Table table461 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table461.AddRow(new string[] {
                            "pageingFilter",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Paging.PagingFilter"});
#line 188
 await testRunner.AndAsync("I call the method \'FindAllAsync\' with the parameter values", ((string)(null)), table461, "And ");
#line hidden
                global::Reqnroll.Table table462 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table462.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Paging.PagedList<AdventureWorksDemo.Data.Models.ProductCa" +
                                "tegoryModel>"});
#line 191
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table462, "Then ");
#line hidden
                global::Reqnroll.Table table463 = new global::Reqnroll.Table(new string[] {
                            "TotalPages",
                            "TotalCount",
                            "PageSize",
                            "CurrentPage"});
                table463.AddRow(new string[] {
                            "2",
                            "7",
                            "5",
                            "1"});
#line 194
 await testRunner.AndAsync("the PagedList values are", ((string)(null)), table463, "And ");
#line hidden
                global::Reqnroll.Table table464 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table464.AddRow(new string[] {
                            "6",
                            "6/1/2002 12:00:00 AM",
                            "Road Bikes",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table464.AddRow(new string[] {
                            "7",
                            "6/1/2002 12:00:00 AM",
                            "For Delete Tests Only",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
#line 197
 await testRunner.AndAsync("the sorted results are", ((string)(null)), table464, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAllAsync_2_5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceFindTests")]
        public async System.Threading.Tasks.Task FindAllAsync_2_5()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAllAsync_2_5", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 202
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table465 = new global::Reqnroll.Table(new string[] {
                            "PageNumber",
                            "PageSize"});
                table465.AddRow(new string[] {
                            "2",
                            "5"});
#line 203
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Paging.PagingFilter\'", ((string)(null)), table465, "When ");
#line hidden
                global::Reqnroll.Table table466 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table466.AddRow(new string[] {
                            "pageingFilter",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Paging.PagingFilter"});
#line 206
 await testRunner.AndAsync("I call the method \'FindAllAsync\' with the parameter values", ((string)(null)), table466, "And ");
#line hidden
                global::Reqnroll.Table table467 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table467.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Paging.PagedList<AdventureWorksDemo.Data.Models.ProductCa" +
                                "tegoryModel>"});
#line 209
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table467, "Then ");
#line hidden
                global::Reqnroll.Table table468 = new global::Reqnroll.Table(new string[] {
                            "TotalPages",
                            "TotalCount",
                            "PageSize",
                            "CurrentPage"});
                table468.AddRow(new string[] {
                            "2",
                            "7",
                            "5",
                            "1"});
#line 212
 await testRunner.AndAsync("the PagedList values are", ((string)(null)), table468, "And ");
#line hidden
                global::Reqnroll.Table table469 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table469.AddRow(new string[] {
                            "6",
                            "6/1/2002 12:00:00 AM",
                            "Road Bikes",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table469.AddRow(new string[] {
                            "7",
                            "6/1/2002 12:00:00 AM",
                            "For Delete Tests Only",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
#line 215
 await testRunner.AndAsync("the sorted results are", ((string)(null)), table469, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAllAsync_2_8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceFindTests")]
        public async System.Threading.Tasks.Task FindAllAsync_2_8()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAllAsync_2_8", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 220
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table470 = new global::Reqnroll.Table(new string[] {
                            "PageNumber",
                            "PageSize"});
                table470.AddRow(new string[] {
                            "2",
                            "8"});
#line 221
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Paging.PagingFilter\'", ((string)(null)), table470, "When ");
#line hidden
                global::Reqnroll.Table table471 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table471.AddRow(new string[] {
                            "pageingFilter",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Paging.PagingFilter"});
#line 224
 await testRunner.AndAsync("I call the method \'FindAllAsync\' with the parameter values", ((string)(null)), table471, "And ");
#line hidden
                global::Reqnroll.Table table472 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table472.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Paging.PagedList<AdventureWorksDemo.Data.Models.ProductCa" +
                                "tegoryModel>"});
#line 227
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table472, "Then ");
#line hidden
                global::Reqnroll.Table table473 = new global::Reqnroll.Table(new string[] {
                            "TotalPages",
                            "TotalCount",
                            "PageSize",
                            "CurrentPage"});
                table473.AddRow(new string[] {
                            "1",
                            "7",
                            "8",
                            "0"});
#line 230
 await testRunner.AndAsync("the PagedList values are", ((string)(null)), table473, "And ");
#line hidden
                global::Reqnroll.Table table474 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table474.AddRow(new string[] {
                            "1",
                            "6/1/2002 12:00:00 AM",
                            "Bikes",
                            "cfbda25c-df71-47a7-b81b-64ee161aa37c"});
                table474.AddRow(new string[] {
                            "2",
                            "6/1/2002 12:00:00 AM",
                            "Components",
                            "c657828d-d808-4aba-91a3-af2ce02300e9"});
                table474.AddRow(new string[] {
                            "3",
                            "6/1/2002 12:00:00 AM",
                            "Clothing",
                            "10a7c342-ca82-48d4-8a38-46a2eb089b74"});
                table474.AddRow(new string[] {
                            "4",
                            "6/1/2002 12:00:00 AM",
                            "Accessories",
                            "2be3be36-d9a2-4eee-b593-ed895d97c2a6"});
                table474.AddRow(new string[] {
                            "5",
                            "6/1/2002 12:00:00 AM",
                            "Mountain Bikes",
                            "2d364ade-264a-433c-b092-4fcbf3804e01"});
                table474.AddRow(new string[] {
                            "6",
                            "6/1/2002 12:00:00 AM",
                            "Road Bikes",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table474.AddRow(new string[] {
                            "7",
                            "6/1/2002 12:00:00 AM",
                            "For Delete Tests Only",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
#line 233
 await testRunner.AndAsync("the sorted results are", ((string)(null)), table474, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAllAsync_1234_5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceFindTests")]
        public async System.Threading.Tasks.Task FindAllAsync_1234_5()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAllAsync_1234_5", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 243
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table475 = new global::Reqnroll.Table(new string[] {
                            "PageNumber",
                            "PageSize"});
                table475.AddRow(new string[] {
                            "1234",
                            "5"});
#line 244
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Paging.PagingFilter\'", ((string)(null)), table475, "When ");
#line hidden
                global::Reqnroll.Table table476 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table476.AddRow(new string[] {
                            "pageingFilter",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Paging.PagingFilter"});
#line 247
 await testRunner.AndAsync("I call the method \'FindAllAsync\' with the parameter values", ((string)(null)), table476, "And ");
#line hidden
                global::Reqnroll.Table table477 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table477.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Paging.PagedList<AdventureWorksDemo.Data.Models.ProductCa" +
                                "tegoryModel>"});
#line 250
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table477, "Then ");
#line hidden
                global::Reqnroll.Table table478 = new global::Reqnroll.Table(new string[] {
                            "TotalPages",
                            "TotalCount",
                            "PageSize",
                            "CurrentPage"});
                table478.AddRow(new string[] {
                            "2",
                            "7",
                            "5",
                            "1"});
#line 253
 await testRunner.AndAsync("the PagedList values are", ((string)(null)), table478, "And ");
#line hidden
                global::Reqnroll.Table table479 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table479.AddRow(new string[] {
                            "6",
                            "6/1/2002 12:00:00 AM",
                            "Road Bikes",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table479.AddRow(new string[] {
                            "7",
                            "6/1/2002 12:00:00 AM",
                            "For Delete Tests Only",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
#line 256
 await testRunner.AndAsync("the sorted results are", ((string)(null)), table479, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAllAsync_5_0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceFindTests")]
        public async System.Threading.Tasks.Task FindAllAsync_5_0()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("FindAllAsync_5_0", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 261
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table480 = new global::Reqnroll.Table(new string[] {
                            "PageNumber",
                            "PageSize"});
                table480.AddRow(new string[] {
                            "5",
                            "0"});
#line 262
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Paging.PagingFilter\'", ((string)(null)), table480, "When ");
#line hidden
                global::Reqnroll.Table table481 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table481.AddRow(new string[] {
                            "pageingFilter",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Paging.PagingFilter"});
#line 265
 await testRunner.AndAsync("I call the method \'FindAllAsync\' with the parameter values", ((string)(null)), table481, "And ");
#line hidden
                global::Reqnroll.Table table482 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table482.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Paging.PagedList<AdventureWorksDemo.Data.Models.ProductCa" +
                                "tegoryModel>"});
#line 268
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table482, "Then ");
#line hidden
                global::Reqnroll.Table table483 = new global::Reqnroll.Table(new string[] {
                            "TotalPages",
                            "TotalCount",
                            "PageSize",
                            "CurrentPage"});
                table483.AddRow(new string[] {
                            "1",
                            "7",
                            "25",
                            "0"});
#line 272
 await testRunner.AndAsync("the PagedList values are", ((string)(null)), table483, "And ");
#line hidden
                global::Reqnroll.Table table484 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ModifiedDate",
                            "Name",
                            "Rowguid"});
                table484.AddRow(new string[] {
                            "1",
                            "6/1/2002 12:00:00 AM",
                            "Bikes",
                            "cfbda25c-df71-47a7-b81b-64ee161aa37c"});
                table484.AddRow(new string[] {
                            "2",
                            "6/1/2002 12:00:00 AM",
                            "Components",
                            "c657828d-d808-4aba-91a3-af2ce02300e9"});
                table484.AddRow(new string[] {
                            "3",
                            "6/1/2002 12:00:00 AM",
                            "Clothing",
                            "10a7c342-ca82-48d4-8a38-46a2eb089b74"});
                table484.AddRow(new string[] {
                            "4",
                            "6/1/2002 12:00:00 AM",
                            "Accessories",
                            "2be3be36-d9a2-4eee-b593-ed895d97c2a6"});
                table484.AddRow(new string[] {
                            "5",
                            "6/1/2002 12:00:00 AM",
                            "Mountain Bikes",
                            "2d364ade-264a-433c-b092-4fcbf3804e01"});
                table484.AddRow(new string[] {
                            "6",
                            "6/1/2002 12:00:00 AM",
                            "Road Bikes",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table484.AddRow(new string[] {
                            "7",
                            "6/1/2002 12:00:00 AM",
                            "For Delete Tests Only",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
#line 275
 await testRunner.AndAsync("the sorted results are", ((string)(null)), table484, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
