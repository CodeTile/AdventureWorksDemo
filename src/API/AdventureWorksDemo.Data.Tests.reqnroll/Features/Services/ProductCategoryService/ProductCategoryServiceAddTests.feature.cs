// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AdventureWorksDemo.Data.Tests.reqnroll.Features.Services.ProductCategoryService
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ProductCategoryServiceAddTestsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Services/ProductCategoryService", "ProductCategoryServiceAddTests", "System tests for the ProductCategoryService\r\nTesting the methods AddAsync", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "ProductCategoryServiceAddTests.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 8
#line hidden
#line 9
 await testRunner.GivenAsync("The service to test is \'AdventureWorksDemo.Data.Services.IProductCategoryService\'" +
                    "", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 10
 await testRunner.AndAsync("I don\'t reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddAsyncNoParent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceAddTests")]
        public async System.Threading.Tasks.Task AddAsyncNoParent()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AddAsyncNoParent", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
#line 13
 await testRunner.GivenAsync("I reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table259 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "ParentProductCategoryId",
                            "Rowguid"});
                table259.AddRow(new string[] {
                            "PingPong",
                            "",
                            "00000000-1111-0000-0000-000000000002"});
#line 14
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Models.ProductCategoryModel\'", ((string)(null)), table259, "When ");
#line hidden
                global::Reqnroll.Table table260 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table260.AddRow(new string[] {
                            "model",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 17
 await testRunner.AndAsync("I call the method \'AddAsync\' with the parameter values", ((string)(null)), table260, "And ");
#line hidden
                global::Reqnroll.Table table261 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table261.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<AdventureWorksDemo.Data.Models.Produ" +
                                "ctCategoryModel>"});
#line 20
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table261, "Then ");
#line hidden
                global::Reqnroll.Table table262 = new global::Reqnroll.Table(new string[] {
                            "IsFailure",
                            "IsSuccess",
                            "Message"});
                table262.AddRow(new string[] {
                            "False",
                            "True",
                            ""});
#line 23
 await testRunner.AndAsync("the result is", ((string)(null)), table262, "And ");
#line hidden
                global::Reqnroll.Table table263 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table263.AddRow(new string[] {
                            "5001",
                            "",
                            "PingPong",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-0000-0000-000000000002"});
#line 26
 await testRunner.AndAsync("the results property \'Value\' contains", ((string)(null)), table263, "And ");
#line hidden
                global::Reqnroll.Table table264 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table264.AddRow(new string[] {
                            "41",
                            "4",
                            "Tires and Tubes",
                            "6/1/2002 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
                table264.AddRow(new string[] {
                            "42",
                            "",
                            "Record to Delete",
                            "6/1/2005 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-000000000001"});
                table264.AddRow(new string[] {
                            "5001",
                            "",
                            "PingPong",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-0000-0000-000000000002"});
#line 29
 await testRunner.AndAsync("the table \'SalesLT.ProductCategory\' filtered by \'ProductCategoryId > 40\' contains" +
                        "", ((string)(null)), table264, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddAsyncNoParentShortName")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceAddTests")]
        public async System.Threading.Tasks.Task AddAsyncNoParentShortName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AddAsyncNoParentShortName", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
#line 36
 await testRunner.GivenAsync("I reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table265 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "ParentProductCategoryId",
                            "Rowguid"});
                table265.AddRow(new string[] {
                            "Hi",
                            "",
                            "00000000-1111-0000-0000-000000000002"});
#line 37
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Models.ProductCategoryModel\'", ((string)(null)), table265, "When ");
#line hidden
                global::Reqnroll.Table table266 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table266.AddRow(new string[] {
                            "model",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 40
 await testRunner.AndAsync("I call the method \'AddAsync\' with the parameter values", ((string)(null)), table266, "And ");
#line hidden
                global::Reqnroll.Table table267 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table267.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<AdventureWorksDemo.Data.Models.Produ" +
                                "ctCategoryModel>"});
#line 43
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table267, "Then ");
#line hidden
                global::Reqnroll.Table table268 = new global::Reqnroll.Table(new string[] {
                            "IsFailure",
                            "IsSuccess",
                            "Message"});
                table268.AddRow(new string[] {
                            "True",
                            "False",
                            "\'Name\' must be between 3 and 50 characters. You entered 2 characters."});
#line 46
 await testRunner.AndAsync("the result is", ((string)(null)), table268, "And ");
#line hidden
                global::Reqnroll.Table table269 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table269.AddRow(new string[] {
                            "0",
                            "",
                            "Hi",
                            "1/1/0001 12:00:00 AM",
                            "00000000-1111-0000-0000-000000000002"});
#line 50
 await testRunner.AndAsync("the results property \'Value\' contains", ((string)(null)), table269, "And ");
#line hidden
                global::Reqnroll.Table table270 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table270.AddRow(new string[] {
                            "41",
                            "4",
                            "Tires and Tubes",
                            "6/1/2002 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
                table270.AddRow(new string[] {
                            "42",
                            "",
                            "Record to Delete",
                            "6/1/2005 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-000000000001"});
#line 54
 await testRunner.AndAsync("the table \'SalesLT.ProductCategory\' filtered by \'ProductCategoryId > 40\' contains" +
                        "", ((string)(null)), table270, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddAsyncParent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceAddTests")]
        public async System.Threading.Tasks.Task AddAsyncParent()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AddAsyncParent", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
#line 60
 await testRunner.GivenAsync("I reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table271 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "ParentProductCategoryId",
                            "Rowguid"});
                table271.AddRow(new string[] {
                            "PingPong",
                            "42",
                            "00000000-1111-0000-0000-000000000002"});
#line 61
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Models.ProductCategoryModel\'", ((string)(null)), table271, "When ");
#line hidden
                global::Reqnroll.Table table272 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table272.AddRow(new string[] {
                            "model",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 64
 await testRunner.AndAsync("I call the method \'AddAsync\' with the parameter values", ((string)(null)), table272, "And ");
#line hidden
                global::Reqnroll.Table table273 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table273.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<AdventureWorksDemo.Data.Models.Produ" +
                                "ctCategoryModel>"});
#line 67
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table273, "Then ");
#line hidden
                global::Reqnroll.Table table274 = new global::Reqnroll.Table(new string[] {
                            "IsFailure",
                            "IsSuccess",
                            "Message"});
                table274.AddRow(new string[] {
                            "False",
                            "True",
                            ""});
#line 70
 await testRunner.AndAsync("the result is", ((string)(null)), table274, "And ");
#line hidden
                global::Reqnroll.Table table275 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table275.AddRow(new string[] {
                            "5001",
                            "42",
                            "PingPong",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-0000-0000-000000000002"});
#line 73
 await testRunner.AndAsync("the results property \'Value\' contains", ((string)(null)), table275, "And ");
#line hidden
                global::Reqnroll.Table table276 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table276.AddRow(new string[] {
                            "41",
                            "4",
                            "Tires and Tubes",
                            "6/1/2002 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
                table276.AddRow(new string[] {
                            "42",
                            "",
                            "Record to Delete",
                            "6/1/2005 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-000000000001"});
                table276.AddRow(new string[] {
                            "5001",
                            "42",
                            "PingPong",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-0000-0000-000000000002"});
#line 76
 await testRunner.AndAsync("the table \'SalesLT.ProductCategory\' filtered by \'ProductCategoryId > 40\' contains" +
                        "", ((string)(null)), table276, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddAsyncParentShortName")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceAddTests")]
        public async System.Threading.Tasks.Task AddAsyncParentShortName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AddAsyncParentShortName", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
#line 83
 await testRunner.GivenAsync("I reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table277 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "ParentProductCategoryId",
                            "Rowguid"});
                table277.AddRow(new string[] {
                            "Hi",
                            "42",
                            "00000000-1111-0000-0000-000000000002"});
#line 84
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Models.ProductCategoryModel\'", ((string)(null)), table277, "When ");
#line hidden
                global::Reqnroll.Table table278 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table278.AddRow(new string[] {
                            "model",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 87
 await testRunner.AndAsync("I call the method \'AddAsync\' with the parameter values", ((string)(null)), table278, "And ");
#line hidden
                global::Reqnroll.Table table279 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table279.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<AdventureWorksDemo.Data.Models.Produ" +
                                "ctCategoryModel>"});
#line 90
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table279, "Then ");
#line hidden
                global::Reqnroll.Table table280 = new global::Reqnroll.Table(new string[] {
                            "IsFailure",
                            "IsSuccess",
                            "Message"});
                table280.AddRow(new string[] {
                            "True",
                            "False",
                            "\'Name\' must be between 3 and 50 characters. You entered 2 characters."});
#line 93
 await testRunner.AndAsync("the result is", ((string)(null)), table280, "And ");
#line hidden
                global::Reqnroll.Table table281 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table281.AddRow(new string[] {
                            "0",
                            "42",
                            "Hi",
                            "1/1/0001 12:00:00 AM",
                            "00000000-1111-0000-0000-000000000002"});
#line 97
 await testRunner.AndAsync("the results property \'Value\' contains", ((string)(null)), table281, "And ");
#line hidden
                global::Reqnroll.Table table282 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table282.AddRow(new string[] {
                            "41",
                            "4",
                            "Tires and Tubes",
                            "6/1/2002 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
                table282.AddRow(new string[] {
                            "42",
                            "",
                            "Record to Delete",
                            "6/1/2005 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-000000000001"});
#line 100
 await testRunner.AndAsync("the table \'SalesLT.ProductCategory\' filtered by \'ProductCategoryId > 40\' contains" +
                        "", ((string)(null)), table282, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddBatchAsync")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceAddTests")]
        public async System.Threading.Tasks.Task AddBatchAsync()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AddBatchAsync", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 105
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
#line 106
 await testRunner.GivenAsync("I reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table283 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "ParentProductCategoryId",
                            "Rowguid"});
                table283.AddRow(new string[] {
                            "How",
                            "4",
                            "00000000-1111-1111-0000-000000000001"});
                table283.AddRow(new string[] {
                            "Now",
                            "5",
                            "00000000-1111-1111-0000-000000000002"});
                table283.AddRow(new string[] {
                            "Brown",
                            "41",
                            "00000000-1111-1111-0000-000000000003"});
                table283.AddRow(new string[] {
                            "Cow",
                            "",
                            "00000000-1111-1111-0000-000000000004"});
#line 107
 await testRunner.WhenAsync("I populate a list of the model \'AdventureWorksDemo.Data.Models.ProductCategoryMod" +
                        "el\'", ((string)(null)), table283, "When ");
#line hidden
                global::Reqnroll.Table table284 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table284.AddRow(new string[] {
                            "model",
                            "{{ListOfObjects}}",
                            "System.Collections.Generic.IEnumerable<AdventureWorksDemo.Data.Models.ProductCate" +
                                "goryModel>"});
#line 113
 await testRunner.AndAsync("I call the method \'AddBatchAsync\' with the parameter values", ((string)(null)), table284, "And ");
#line hidden
                global::Reqnroll.Table table285 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table285.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<System.Collections.Generic.IEnumerab" +
                                "le<AdventureWorksDemo.Data.Models.ProductCategoryModel>"});
#line 116
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table285, "Then ");
#line hidden
                global::Reqnroll.Table table286 = new global::Reqnroll.Table(new string[] {
                            "IsFailure",
                            "IsSuccess",
                            "Message"});
                table286.AddRow(new string[] {
                            "false",
                            "true",
                            ""});
#line 119
 await testRunner.AndAsync("the result is", ((string)(null)), table286, "And ");
#line hidden
                global::Reqnroll.Table table287 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table287.AddRow(new string[] {
                            "5001",
                            "4",
                            "How",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-1111-0000-000000000001"});
                table287.AddRow(new string[] {
                            "5002",
                            "5",
                            "Now",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-1111-0000-000000000002"});
                table287.AddRow(new string[] {
                            "5003",
                            "41",
                            "Brown",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-1111-0000-000000000003"});
                table287.AddRow(new string[] {
                            "5004",
                            "",
                            "Cow",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-1111-0000-000000000004"});
#line 123
 await testRunner.AndAsync("the results property \'Value\' contains", ((string)(null)), table287, "And ");
#line hidden
                global::Reqnroll.Table table288 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table288.AddRow(new string[] {
                            "41",
                            "4",
                            "Tires and Tubes",
                            "6/1/2002 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
                table288.AddRow(new string[] {
                            "42",
                            "",
                            "Record to Delete",
                            "6/1/2005 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-000000000001"});
                table288.AddRow(new string[] {
                            "5001",
                            "4",
                            "How",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-1111-0000-000000000001"});
                table288.AddRow(new string[] {
                            "5002",
                            "5",
                            "Now",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-1111-0000-000000000002"});
                table288.AddRow(new string[] {
                            "5003",
                            "41",
                            "Brown",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-1111-0000-000000000003"});
                table288.AddRow(new string[] {
                            "5004",
                            "",
                            "Cow",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-1111-0000-000000000004"});
#line 130
 await testRunner.AndAsync("the table \'SalesLT.ProductCategory\' filtered by \'ProductCategoryId > 40\' contains" +
                        "", ((string)(null)), table288, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddBatchAsync2ShortName")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceAddTests")]
        public async System.Threading.Tasks.Task AddBatchAsync2ShortName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AddBatchAsync2ShortName", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 139
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
#line 140
 await testRunner.GivenAsync("I reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table289 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "ParentProductCategoryId",
                            "Rowguid"});
                table289.AddRow(new string[] {
                            "Hi",
                            "4",
                            "00000000-1111-1111-0000-000000000001"});
                table289.AddRow(new string[] {
                            "Now",
                            "5",
                            "00000000-1111-1111-0000-000000000002"});
                table289.AddRow(new string[] {
                            "Brown",
                            "41",
                            "00000000-1111-1111-0000-000000000003"});
                table289.AddRow(new string[] {
                            "It",
                            "",
                            "00000000-1111-1111-0000-000000000004"});
#line 141
 await testRunner.WhenAsync("I populate a list of the model \'AdventureWorksDemo.Data.Models.ProductCategoryMod" +
                        "el\'", ((string)(null)), table289, "When ");
#line hidden
                global::Reqnroll.Table table290 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table290.AddRow(new string[] {
                            "model",
                            "{{ListOfObjects}}",
                            "System.Collections.Generic.IEnumerable<AdventureWorksDemo.Data.Models.ProductCate" +
                                "goryModel>"});
#line 147
 await testRunner.AndAsync("I call the method \'AddBatchAsync\' with the parameter values", ((string)(null)), table290, "And ");
#line hidden
                global::Reqnroll.Table table291 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table291.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<System.Collections.Generic.IEnumerab" +
                                "le<AdventureWorksDemo.Data.Models.ProductCategoryModel>"});
#line 150
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table291, "Then ");
#line hidden
                global::Reqnroll.Table table292 = new global::Reqnroll.Table(new string[] {
                            "IsFailure",
                            "IsSuccess"});
                table292.AddRow(new string[] {
                            "True",
                            "False"});
#line 153
 await testRunner.AndAsync("the result is", ((string)(null)), table292, "And ");
#line hidden
                global::Reqnroll.Table table293 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table293.AddRow(new string[] {
                            "\'Name\' must be between 3 and 50 characters. You entered 2 characters."});
                table293.AddRow(new string[] {
                            "\'Name\' must be between 3 and 50 characters. You entered 2 characters."});
#line 156
 await testRunner.AndAsync("the results property \'Message\' contains", ((string)(null)), table293, "And ");
#line hidden
                global::Reqnroll.Table table294 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table294.AddRow(new string[] {
                            "0",
                            "4",
                            "Hi",
                            "1/1/0001 12:00:00 AM",
                            "00000000-1111-1111-0000-000000000001"});
                table294.AddRow(new string[] {
                            "0",
                            "5",
                            "Now",
                            "1/1/0001 12:00:00 AM",
                            "00000000-1111-1111-0000-000000000002"});
                table294.AddRow(new string[] {
                            "0",
                            "41",
                            "Brown",
                            "1/1/0001 12:00:00 AM",
                            "00000000-1111-1111-0000-000000000003"});
                table294.AddRow(new string[] {
                            "0",
                            "",
                            "It",
                            "1/1/0001 12:00:00 AM",
                            "00000000-1111-1111-0000-000000000004"});
#line 160
 await testRunner.AndAsync("the results property \'Value\' contains", ((string)(null)), table294, "And ");
#line hidden
                global::Reqnroll.Table table295 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table295.AddRow(new string[] {
                            "41",
                            "4",
                            "Tires and Tubes",
                            "6/1/2002 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
                table295.AddRow(new string[] {
                            "42",
                            "",
                            "Record to Delete",
                            "6/1/2005 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-000000000001"});
#line 167
 await testRunner.AndAsync("the table \'SalesLT.ProductCategory\' filtered by \'ProductCategoryId > 40\' contains" +
                        "", ((string)(null)), table295, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
