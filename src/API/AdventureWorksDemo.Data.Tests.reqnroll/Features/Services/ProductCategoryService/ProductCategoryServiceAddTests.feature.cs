// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AdventureWorksDemo.Data.Tests.reqnroll.Features.Services.ProductCategoryService
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ProductCategoryServiceAddTestsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Services/ProductCategoryService", "ProductCategoryServiceAddTests", "System tests for the ProductCategoryService\r\nTesting the methods AddAsync", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "ProductCategoryServiceAddTests.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 8
#line hidden
#line 9
 await testRunner.GivenAsync("The service to test is \'AdventureWorksDemo.Data.Services.IProductCategoryService\'" +
                    "", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 10
 await testRunner.AndAsync("I don\'t reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddAsyncShortName")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceAddTests")]
        public async System.Threading.Tasks.Task AddAsyncShortName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AddAsyncShortName", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table397 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Rowguid"});
                table397.AddRow(new string[] {
                            "Hi",
                            "00000000-1111-0000-0000-000000000002"});
#line 13
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Models.ProductCategoryModel\'", ((string)(null)), table397, "When ");
#line hidden
                global::Reqnroll.Table table398 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table398.AddRow(new string[] {
                            "model",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 16
 await testRunner.AndAsync("I call the method \'AddAsync\' with the parameter values", ((string)(null)), table398, "And ");
#line hidden
                global::Reqnroll.Table table399 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table399.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<AdventureWorksDemo.Data.Models.Produ" +
                                "ctCategoryModel>"});
#line 19
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table399, "Then ");
#line hidden
                global::Reqnroll.Table table400 = new global::Reqnroll.Table(new string[] {
                            "IsFailure",
                            "IsSuccess",
                            "Message"});
                table400.AddRow(new string[] {
                            "True",
                            "False",
                            "\'Name\' must be between 3 and 50 characters. You entered 2 characters."});
#line 22
 await testRunner.AndAsync("the result is", ((string)(null)), table400, "And ");
#line hidden
                global::Reqnroll.Table table401 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table401.AddRow(new string[] {
                            "0",
                            "Hi",
                            "1/1/0001 12:00:00 AM",
                            "00000000-1111-0000-0000-000000000002"});
#line 26
 await testRunner.AndAsync("the results property \'Value\' contains", ((string)(null)), table401, "And ");
#line hidden
                global::Reqnroll.Table table402 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table402.AddRow(new string[] {
                            "6",
                            "Road Bikes",
                            "6/1/2002 12:00:00 AM",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table402.AddRow(new string[] {
                            "7",
                            "For Delete Tests Only",
                            "6/1/2002 12:00:00 AM",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
#line 30
 await testRunner.AndAsync("the table \'Production.ProductCategory\' filtered by \'ProductCategoryId > 5\' contai" +
                        "ns", ((string)(null)), table402, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddAsync")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceAddTests")]
        public async System.Threading.Tasks.Task AddAsync()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AddAsync", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
#line 36
 await testRunner.GivenAsync("I reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table403 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Rowguid"});
                table403.AddRow(new string[] {
                            "PingPong",
                            "00000000-1111-0000-0000-000000000002"});
#line 37
 await testRunner.WhenAsync("I populate the model \'AdventureWorksDemo.Data.Models.ProductCategoryModel\'", ((string)(null)), table403, "When ");
#line hidden
                global::Reqnroll.Table table404 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table404.AddRow(new string[] {
                            "model",
                            "{{model}}",
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 40
 await testRunner.AndAsync("I call the method \'AddAsync\' with the parameter values", ((string)(null)), table404, "And ");
#line hidden
                global::Reqnroll.Table table405 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table405.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<AdventureWorksDemo.Data.Models.Produ" +
                                "ctCategoryModel>"});
#line 43
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table405, "Then ");
#line hidden
                global::Reqnroll.Table table406 = new global::Reqnroll.Table(new string[] {
                            "IsFailure",
                            "IsSuccess",
                            "Message"});
                table406.AddRow(new string[] {
                            "False",
                            "True",
                            ""});
#line 46
 await testRunner.AndAsync("the result is", ((string)(null)), table406, "And ");
#line hidden
                global::Reqnroll.Table table407 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table407.AddRow(new string[] {
                            "5001",
                            "PingPong",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-0000-0000-000000000002"});
#line 49
 await testRunner.AndAsync("the results property \'Value\' contains", ((string)(null)), table407, "And ");
#line hidden
                global::Reqnroll.Table table408 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table408.AddRow(new string[] {
                            "6",
                            "Road Bikes",
                            "6/1/2002 12:00:00 AM",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table408.AddRow(new string[] {
                            "7",
                            "For Delete Tests Only",
                            "6/1/2002 12:00:00 AM",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
                table408.AddRow(new string[] {
                            "5001",
                            "PingPong",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-0000-0000-000000000002"});
#line 52
 await testRunner.AndAsync("the table \'Production.ProductCategory\' filtered by \'ProductCategoryId > 5\' contai" +
                        "ns", ((string)(null)), table408, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddBatchAsync")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceAddTests")]
        public async System.Threading.Tasks.Task AddBatchAsync()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AddBatchAsync", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
#line 59
 await testRunner.GivenAsync("I reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table409 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Rowguid"});
                table409.AddRow(new string[] {
                            "How",
                            "00000000-1111-1111-0000-000000000001"});
                table409.AddRow(new string[] {
                            "Now",
                            "00000000-1111-1111-0000-000000000002"});
                table409.AddRow(new string[] {
                            "Brown",
                            "00000000-1111-1111-0000-000000000003"});
                table409.AddRow(new string[] {
                            "Cow",
                            "00000000-1111-1111-0000-000000000004"});
#line 60
 await testRunner.WhenAsync("I populate a list of the model \'AdventureWorksDemo.Data.Models.ProductCategoryMod" +
                        "el\'", ((string)(null)), table409, "When ");
#line hidden
                global::Reqnroll.Table table410 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table410.AddRow(new string[] {
                            "model",
                            "{{ListOfObjects}}",
                            "System.Collections.Generic.IEnumerable<AdventureWorksDemo.Data.Models.ProductCate" +
                                "goryModel>"});
#line 66
 await testRunner.AndAsync("I call the method \'AddBatchAsync\' with the parameter values", ((string)(null)), table410, "And ");
#line hidden
                global::Reqnroll.Table table411 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table411.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<System.Collections.Generic.IEnumerab" +
                                "le<AdventureWorksDemo.Data.Models.ProductCategoryModel>"});
#line 69
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table411, "Then ");
#line hidden
                global::Reqnroll.Table table412 = new global::Reqnroll.Table(new string[] {
                            "IsFailure",
                            "IsSuccess",
                            "Message"});
                table412.AddRow(new string[] {
                            "false",
                            "true",
                            ""});
#line 72
 await testRunner.AndAsync("the result is", ((string)(null)), table412, "And ");
#line hidden
                global::Reqnroll.Table table413 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table413.AddRow(new string[] {
                            "5001",
                            "How",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-1111-0000-000000000001"});
                table413.AddRow(new string[] {
                            "5002",
                            "Now",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-1111-0000-000000000002"});
                table413.AddRow(new string[] {
                            "5003",
                            "Brown",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-1111-0000-000000000003"});
                table413.AddRow(new string[] {
                            "5004",
                            "Cow",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-1111-0000-000000000004"});
#line 76
 await testRunner.AndAsync("the results property \'Value\' contains", ((string)(null)), table413, "And ");
#line hidden
                global::Reqnroll.Table table414 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table414.AddRow(new string[] {
                            "6",
                            "Road Bikes",
                            "6/1/2002 12:00:00 AM",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table414.AddRow(new string[] {
                            "7",
                            "For Delete Tests Only",
                            "6/1/2002 12:00:00 AM",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
                table414.AddRow(new string[] {
                            "5001",
                            "How",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-1111-0000-000000000001"});
                table414.AddRow(new string[] {
                            "5002",
                            "Now",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-1111-0000-000000000002"});
                table414.AddRow(new string[] {
                            "5003",
                            "Brown",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-1111-0000-000000000003"});
                table414.AddRow(new string[] {
                            "5004",
                            "Cow",
                            "5/24/2024 12:34:56 PM",
                            "00000000-1111-1111-0000-000000000004"});
#line 83
 await testRunner.AndAsync("the table \'Production.ProductCategory\' filtered by \'ProductCategoryId > 5\' contai" +
                        "ns", ((string)(null)), table414, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("AddBatchAsync2ShortName")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceAddTests")]
        public async System.Threading.Tasks.Task AddBatchAsync2ShortName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AddBatchAsync2ShortName", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 92
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table415 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Rowguid"});
                table415.AddRow(new string[] {
                            "Hi",
                            "00000000-1111-1111-0000-000000000001"});
                table415.AddRow(new string[] {
                            "Now",
                            "00000000-1111-1111-0000-000000000002"});
                table415.AddRow(new string[] {
                            "Brown",
                            "00000000-1111-1111-0000-000000000003"});
                table415.AddRow(new string[] {
                            "It",
                            "00000000-1111-1111-0000-000000000004"});
#line 93
 await testRunner.WhenAsync("I populate a list of the model \'AdventureWorksDemo.Data.Models.ProductCategoryMod" +
                        "el\'", ((string)(null)), table415, "When ");
#line hidden
                global::Reqnroll.Table table416 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table416.AddRow(new string[] {
                            "model",
                            "{{ListOfObjects}}",
                            "System.Collections.Generic.IEnumerable<AdventureWorksDemo.Data.Models.ProductCate" +
                                "goryModel>"});
#line 99
 await testRunner.AndAsync("I call the method \'AddBatchAsync\' with the parameter values", ((string)(null)), table416, "And ");
#line hidden
                global::Reqnroll.Table table417 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table417.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<System.Collections.Generic.IEnumerab" +
                                "le<AdventureWorksDemo.Data.Models.ProductCategoryModel>"});
#line 102
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table417, "Then ");
#line hidden
                global::Reqnroll.Table table418 = new global::Reqnroll.Table(new string[] {
                            "IsFailure",
                            "IsSuccess"});
                table418.AddRow(new string[] {
                            "True",
                            "False"});
#line 105
 await testRunner.AndAsync("the result is", ((string)(null)), table418, "And ");
#line hidden
                global::Reqnroll.Table table419 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table419.AddRow(new string[] {
                            "\'Name\' must be between 3 and 50 characters. You entered 2 characters."});
                table419.AddRow(new string[] {
                            "\'Name\' must be between 3 and 50 characters. You entered 2 characters."});
#line 108
 await testRunner.AndAsync("the results property \'Message\' contains", ((string)(null)), table419, "And ");
#line hidden
                global::Reqnroll.Table table420 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table420.AddRow(new string[] {
                            "0",
                            "Hi",
                            "1/1/0001 12:00:00 AM",
                            "00000000-1111-1111-0000-000000000001"});
                table420.AddRow(new string[] {
                            "0",
                            "Now",
                            "1/1/0001 12:00:00 AM",
                            "00000000-1111-1111-0000-000000000002"});
                table420.AddRow(new string[] {
                            "0",
                            "Brown",
                            "1/1/0001 12:00:00 AM",
                            "00000000-1111-1111-0000-000000000003"});
                table420.AddRow(new string[] {
                            "0",
                            "It",
                            "1/1/0001 12:00:00 AM",
                            "00000000-1111-1111-0000-000000000004"});
#line 112
 await testRunner.AndAsync("the results property \'Value\' contains", ((string)(null)), table420, "And ");
#line hidden
                global::Reqnroll.Table table421 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table421.AddRow(new string[] {
                            "6",
                            "Road Bikes",
                            "6/1/2002 12:00:00 AM",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table421.AddRow(new string[] {
                            "7",
                            "For Delete Tests Only",
                            "6/1/2002 12:00:00 AM",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
#line 119
 await testRunner.AndAsync("the table \'Production.ProductCategory\' filtered by \'ProductCategoryId > 5\' contai" +
                        "ns", ((string)(null)), table421, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
