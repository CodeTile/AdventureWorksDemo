// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AdventureWorksDemo.Data.Tests.reqnroll.Features.Services.ProductCategoryService
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ProductCategoryServiceDeleteTestsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Services/ProductCategoryService", "ProductCategoryServiceDeleteTests", "System tests for the ProductCategoryService\r\nTesting the methods DeleteAsync", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "ProductCategoryServiceDeleteTests.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
#line hidden
#line 8
 await testRunner.GivenAsync("The service to test is \'AdventureWorksDemo.Data.Services.IProductCategoryService\'" +
                    "", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
 await testRunner.AndAsync("I don\'t reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DeleteAsync1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceDeleteTests")]
        public async System.Threading.Tasks.Task DeleteAsync1234()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("DeleteAsync1234", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table414 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName",
                            "ModifiedDate"});
                table414.AddRow(new string[] {
                            "productCategoryId",
                            "1234",
                            "int",
                            "21 Apr 2024 12:34:56"});
#line 13
 await testRunner.WhenAsync("I call the method \'DeleteAsync\' with the parameter values", ((string)(null)), table414, "When ");
#line hidden
                global::Reqnroll.Table table415 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table415.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<System.Boolean>"});
#line 16
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table415, "Then ");
#line hidden
                global::Reqnroll.Table table416 = new global::Reqnroll.Table(new string[] {
                            "IsFailure",
                            "IsSuccess",
                            "Message"});
                table416.AddRow(new string[] {
                            "True",
                            "False",
                            "Unable to find record to delete!"});
#line 19
 await testRunner.AndAsync("the result is", ((string)(null)), table416, "And ");
#line hidden
                global::Reqnroll.Table table417 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table417.AddRow(new string[] {
                            "1",
                            "Bikes",
                            "6/1/2002 12:00:00 AM",
                            "cfbda25c-df71-47a7-b81b-64ee161aa37c"});
                table417.AddRow(new string[] {
                            "2",
                            "Components",
                            "6/1/2002 12:00:00 AM",
                            "c657828d-d808-4aba-91a3-af2ce02300e9"});
                table417.AddRow(new string[] {
                            "3",
                            "Clothing",
                            "6/1/2002 12:00:00 AM",
                            "10a7c342-ca82-48d4-8a38-46a2eb089b74"});
                table417.AddRow(new string[] {
                            "4",
                            "Accessories",
                            "6/1/2002 12:00:00 AM",
                            "2be3be36-d9a2-4eee-b593-ed895d97c2a6"});
                table417.AddRow(new string[] {
                            "5",
                            "Mountain Bikes",
                            "6/1/2002 12:00:00 AM",
                            "2d364ade-264a-433c-b092-4fcbf3804e01"});
                table417.AddRow(new string[] {
                            "6",
                            "Road Bikes",
                            "6/1/2002 12:00:00 AM",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
                table417.AddRow(new string[] {
                            "7",
                            "For Delete Tests Only",
                            "6/1/2002 12:00:00 AM",
                            "02c5061d-ecdc-4274-b5f1-e91d76bc3f37"});
#line 23
 await testRunner.AndAsync("the table \'Production.ProductCategory\' contains", ((string)(null)), table417, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DeleteAsync7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceDeleteTests")]
        public async System.Threading.Tasks.Task DeleteAsync7()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("DeleteAsync7", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 34
 await testRunner.GivenAsync("I reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table418 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table418.AddRow(new string[] {
                            "productCategoryId",
                            "7",
                            "int"});
#line 35
 await testRunner.WhenAsync("I call the method \'DeleteAsync\' with the parameter values", ((string)(null)), table418, "When ");
#line hidden
                global::Reqnroll.Table table419 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table419.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<System.Boolean>"});
#line 38
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table419, "Then ");
#line hidden
                global::Reqnroll.Table table420 = new global::Reqnroll.Table(new string[] {
                            "IsFailure",
                            "IsSuccess",
                            "Message"});
                table420.AddRow(new string[] {
                            "False",
                            "True",
                            ""});
#line 41
 await testRunner.AndAsync("the result is", ((string)(null)), table420, "And ");
#line hidden
                global::Reqnroll.Table table421 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table421.AddRow(new string[] {
                            "1",
                            "Bikes",
                            "6/1/2002 12:00:00 AM",
                            "cfbda25c-df71-47a7-b81b-64ee161aa37c"});
                table421.AddRow(new string[] {
                            "2",
                            "Components",
                            "6/1/2002 12:00:00 AM",
                            "c657828d-d808-4aba-91a3-af2ce02300e9"});
                table421.AddRow(new string[] {
                            "3",
                            "Clothing",
                            "6/1/2002 12:00:00 AM",
                            "10a7c342-ca82-48d4-8a38-46a2eb089b74"});
                table421.AddRow(new string[] {
                            "4",
                            "Accessories",
                            "6/1/2002 12:00:00 AM",
                            "2be3be36-d9a2-4eee-b593-ed895d97c2a6"});
                table421.AddRow(new string[] {
                            "5",
                            "Mountain Bikes",
                            "6/1/2002 12:00:00 AM",
                            "2d364ade-264a-433c-b092-4fcbf3804e01"});
                table421.AddRow(new string[] {
                            "6",
                            "Road Bikes",
                            "6/1/2002 12:00:00 AM",
                            "000310c0-bcc8-42c4-b0c3-45ae611af06b"});
#line 44
 await testRunner.ThenAsync("the table \'Production.ProductCategory\' contains", ((string)(null)), table421, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
