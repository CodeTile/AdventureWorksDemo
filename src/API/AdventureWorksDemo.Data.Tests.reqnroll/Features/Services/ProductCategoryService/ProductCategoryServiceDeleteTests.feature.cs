// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AdventureWorksDemo.Data.Tests.reqnroll.Features.Services.ProductCategoryService
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ProductCategoryServiceDeleteTestsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Services/ProductCategoryService", "ProductCategoryServiceDeleteTests", "System tests for the ProductCategoryService\r\nTesting the methods DeleteAsync", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "ProductCategoryServiceDeleteTests.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
#line hidden
#line 8
 await testRunner.GivenAsync("The service to test is \'AdventureWorksDemo.Data.Services.IProductCategoryService\'" +
                    "", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
 await testRunner.AndAsync("I don\'t reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DeleteAsync1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceDeleteTests")]
        public async System.Threading.Tasks.Task DeleteAsync1234()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("DeleteAsync1234", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table281 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName",
                            "ModifiedDate"});
                table281.AddRow(new string[] {
                            "productCategoryId",
                            "1234",
                            "int",
                            "21 Apr 2024 12:34:56"});
#line 14
 await testRunner.WhenAsync("I call the method \'DeleteAsync\' with the parameter values", ((string)(null)), table281, "When ");
#line hidden
                global::Reqnroll.Table table282 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table282.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<System.Boolean>"});
#line 17
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table282, "Then ");
#line hidden
                global::Reqnroll.Table table283 = new global::Reqnroll.Table(new string[] {
                            "IsFailure",
                            "IsSuccess",
                            "Message"});
                table283.AddRow(new string[] {
                            "True",
                            "False",
                            "Unable to find record to delete!"});
#line 20
 await testRunner.AndAsync("the result is", ((string)(null)), table283, "And ");
#line hidden
                global::Reqnroll.Table table284 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table284.AddRow(new string[] {
                            "False"});
#line 24
 await testRunner.AndAsync("the ServiceResult is of type \'System.Boolean\' with the value", ((string)(null)), table284, "And ");
#line hidden
                global::Reqnroll.Table table285 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table285.AddRow(new string[] {
                            "41",
                            "4",
                            "Tires and Tubes",
                            "6/1/2002 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
                table285.AddRow(new string[] {
                            "42",
                            "",
                            "Record to Delete",
                            "6/1/2005 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-000000000001"});
#line 27
 await testRunner.AndAsync("the table \'SalesLT.ProductCategory\' filtered by \'ProductCategoryId > 40\' contains" +
                        "", ((string)(null)), table285, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DeleteAsync42")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceDeleteTests")]
        public async System.Threading.Tasks.Task DeleteAsync42()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("DeleteAsync42", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 36
 await testRunner.GivenAsync("I reset the database after the scenario", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table286 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table286.AddRow(new string[] {
                            "productCategoryId",
                            "42",
                            "int"});
#line 37
 await testRunner.WhenAsync("I call the method \'DeleteAsync\' with the parameter values", ((string)(null)), table286, "When ");
#line hidden
                global::Reqnroll.Table table287 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table287.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ServiceResult<System.Boolean>"});
#line 40
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table287, "Then ");
#line hidden
                global::Reqnroll.Table table288 = new global::Reqnroll.Table(new string[] {
                            "IsFailure",
                            "IsSuccess",
                            "Message"});
                table288.AddRow(new string[] {
                            "False",
                            "True",
                            ""});
#line 43
 await testRunner.AndAsync("the result is", ((string)(null)), table288, "And ");
#line hidden
                global::Reqnroll.Table table289 = new global::Reqnroll.Table(new string[] {
                            "Expected"});
                table289.AddRow(new string[] {
                            "True"});
#line 46
 await testRunner.AndAsync("the ServiceResult is of type \'System.Boolean\' with the value", ((string)(null)), table289, "And ");
#line hidden
                global::Reqnroll.Table table290 = new global::Reqnroll.Table(new string[] {
                            "ProductCategoryId",
                            "ParentProductCategoryId",
                            "Name",
                            "ModifiedDate",
                            "Rowguid"});
                table290.AddRow(new string[] {
                            "41",
                            "4",
                            "Tires and Tubes",
                            "6/1/2002 12:00:00 AM",
                            "3c17c9ae-e906-48b4-bdd3-60e28d47dcdf"});
#line 49
 await testRunner.ThenAsync("the table \'SalesLT.ProductCategory\' filtered by \'ProductCategoryId > 40\' contains" +
                        "", ((string)(null)), table290, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
