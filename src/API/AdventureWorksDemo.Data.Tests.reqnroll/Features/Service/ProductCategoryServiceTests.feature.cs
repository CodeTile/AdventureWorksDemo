// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AdventureWorksDemo.Data.Tests.reqnroll.Features.Service
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ProductCategoryServiceTestsFeature
    {
        
        private static Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "ProductCategoryServiceTests.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, System.Threading.Thread.CurrentThread.ManagedThreadId.ToString());
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Service", "ProductCategoryServiceTests", "A short summary of the feature", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "ProductCategoryServiceTests")))
            {
                await global::AdventureWorksDemo.Data.Tests.reqnroll.Features.Service.ProductCategoryServiceTestsFeature.FeatureSetupAsync(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
#line 5
 await testRunner.GivenAsync("The service to test is \'AdventureWorksDemo.Data.Services.IProductCategoryService\'" +
                    "", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAsync01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceTests")]
        public async System.Threading.Tasks.Task FindAsync01()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("FindAsync01", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                Reqnroll.Table table1 = new Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table1.AddRow(new string[] {
                            "productCategoryId",
                            "1",
                            "int"});
#line 7
 await testRunner.WhenAsync("I call the method \'FindAsync\' with the parameter values", ((string)(null)), table1, "When ");
#line hidden
                Reqnroll.Table table2 = new Reqnroll.Table(new string[] {
                            "Expected"});
                table2.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 10
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table2, "Then ");
#line hidden
                Reqnroll.Table table3 = new Reqnroll.Table(new string[] {
                            "ModifiedDate",
                            "Name",
                            "ParentProductCategoryId",
                            "ProductCategoryId",
                            "Rowguid"});
                table3.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Bikes",
                            "",
                            "1",
                            "cfbda25c-df71-47a7-b81b-64ee161aa37c"});
#line 13
 await testRunner.AndAsync("the result is", ((string)(null)), table3, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAsync04")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceTests")]
        public async System.Threading.Tasks.Task FindAsync04()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("FindAsync04", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                Reqnroll.Table table4 = new Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table4.AddRow(new string[] {
                            "productCategoryId",
                            "4",
                            "int"});
#line 17
 await testRunner.WhenAsync("I call the method \'FindAsync\' with the parameter values", ((string)(null)), table4, "When ");
#line hidden
                Reqnroll.Table table5 = new Reqnroll.Table(new string[] {
                            "Expected"});
                table5.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 20
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table5, "Then ");
#line hidden
                Reqnroll.Table table6 = new Reqnroll.Table(new string[] {
                            "ModifiedDate",
                            "Name",
                            "ParentProductCategoryId",
                            "ProductCategoryId",
                            "Rowguid"});
                table6.AddRow(new string[] {
                            "6/1/2002 12:00:00 AM",
                            "Accessories",
                            "",
                            "4",
                            "2be3be36-d9a2-4eee-b593-ed895d97c2a6"});
#line 23
 await testRunner.AndAsync("the result is", ((string)(null)), table6, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("FindAsync1234")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductCategoryServiceTests")]
        public async System.Threading.Tasks.Task FindAsync1234()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("FindAsync1234", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                Reqnroll.Table table7 = new Reqnroll.Table(new string[] {
                            "Key",
                            "Value",
                            "TypeName"});
                table7.AddRow(new string[] {
                            "productCategoryId",
                            "1234",
                            "int"});
#line 28
 await testRunner.WhenAsync("I call the method \'FindAsync\' with the parameter values", ((string)(null)), table7, "When ");
#line hidden
                Reqnroll.Table table8 = new Reqnroll.Table(new string[] {
                            "Expected"});
                table8.AddRow(new string[] {
                            "AdventureWorksDemo.Data.Models.ProductCategoryModel"});
#line 32
 await testRunner.ThenAsync("the result is of type", ((string)(null)), table8, "Then ");
#line hidden
#line 35
 await testRunner.AndAsync("the result is null", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
